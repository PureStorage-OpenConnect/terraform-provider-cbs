// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeCommonAllOf1 A disk-like random access virtual storage device that a FlashArray system exports to hosts via a logical unit number (LUN). To a host, a volume contains a number of 512-byte sectors in which data can be written and from which it can be read.
//
// swagger:model volumeCommonAllOf1
type VolumeCommonAllOf1 struct {

	// The total number of hosts and host groups connected to the volume.
	// Read Only: true
	ConnectionCount int64 `json:"connection_count,omitempty"`

	// The volume creation time. Measured in milliseconds since the UNIX epoch.
	// Read Only: true
	Created int64 `json:"created,omitempty"`

	// Returns a value of `true` if the volume has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed volume is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed volume can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the volume is permanently eradicated and can no longer be recovered.
	Destroyed bool `json:"destroyed,omitempty"`

	// The host encryption key status for this volume. Possible values include `none`, `detected`, and `fetched`.
	// Read Only: true
	HostEncryptionKeyStatus string `json:"host_encryption_key_status,omitempty"`

	// The virtual size of the volume. Measured in bytes and must be a multiple of 512.
	// Maximum: 4.503599627370496e+15
	Provisioned int64 `json:"provisioned,omitempty"`

	// qos
	Qos *VolumeCommonAllOf1Qos `json:"qos,omitempty"`

	// A globally unique serial number generated by the system when the volume is created.
	// Read Only: true
	Serial string `json:"serial,omitempty"`

	// space
	Space *VolumeCommonAllOf1Space `json:"space,omitempty"`

	// The amount of time left until the destroyed volume is permanently eradicated. Measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed volume can be recovered by setting `destroyed=false`.
	// Read Only: true
	TimeRemaining int64 `json:"time_remaining,omitempty"`
}

// Validate validates this volume common all of1
func (m *VolumeCommonAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvisioned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeCommonAllOf1) validateProvisioned(formats strfmt.Registry) error {

	if swag.IsZero(m.Provisioned) { // not required
		return nil
	}

	if err := validate.MaximumInt("provisioned", "body", int64(m.Provisioned), 4.503599627370496e+15, false); err != nil {
		return err
	}

	return nil
}

func (m *VolumeCommonAllOf1) validateQos(formats strfmt.Registry) error {

	if swag.IsZero(m.Qos) { // not required
		return nil
	}

	if m.Qos != nil {
		if err := m.Qos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeCommonAllOf1) validateSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeCommonAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeCommonAllOf1) UnmarshalBinary(b []byte) error {
	var res VolumeCommonAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
