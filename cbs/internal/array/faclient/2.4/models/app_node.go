// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppNode An individual node of a Purity app. Nodes are indexed starting at `0`.
//
// swagger:model AppNode
type AppNode struct {

	// app
	App *AppNodeOAIGenApp `json:"app,omitempty"`

	// An index that represents this node.
	Index int64 `json:"index,omitempty"`

	// The node status. Possible values are `starting`, `healthy`, `unhealthy`, `critical`, `stopping`, and `disabled`.
	Status string `json:"status,omitempty"`

	// The node version.
	Version string `json:"version,omitempty"`

	// The VNC information used to access this node if VNC is enabled.
	Vnc []string `json:"vnc"`
}

// Validate validates this app node
func (m *AppNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppNode) validateApp(formats strfmt.Registry) error {

	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppNode) UnmarshalBinary(b []byte) error {
	var res AppNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
