// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KMIPPatchAllOf0 kmip patch all of0
//
// swagger:model kmipPatchAllOf0
type KMIPPatchAllOf0 struct {

	// The text of the CA certificate for the KMIP server.
	// Max Length: 3000
	CaCertificate string `json:"ca_certificate,omitempty"`

	// certificate
	Certificate *KMIPPatchAllOf0Certificate `json:"certificate,omitempty"`

	// List of URIs for the configured KMIP servers.
	Uris []string `json:"uris"`
}

// Validate validates this kmip patch all of0
func (m *KMIPPatchAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KMIPPatchAllOf0) validateCaCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.CaCertificate) { // not required
		return nil
	}

	if err := validate.MaxLength("ca_certificate", "body", string(m.CaCertificate), 3000); err != nil {
		return err
	}

	return nil
}

func (m *KMIPPatchAllOf0) validateCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KMIPPatchAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KMIPPatchAllOf0) UnmarshalBinary(b []byte) error {
	var res KMIPPatchAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
