// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectoryPerformanceOAIGenAllOf1 directory performance Oai gen all of1
//
// swagger:model directoryPerformanceOaiGenAllOf1
type DirectoryPerformanceOAIGenAllOf1 struct {

	// The average I/O size for both read and write (all) operations.
	// Minimum: 0
	BytesPerOp *int64 `json:"bytes_per_op,omitempty"`

	// The average I/O size per read, measured in bytes.
	// Minimum: 0
	BytesPerRead *int64 `json:"bytes_per_read,omitempty"`

	// The average I/O size per write, measured in bytes.
	// Minimum: 0
	BytesPerWrite *int64 `json:"bytes_per_write,omitempty"`

	// The number of other requests processed per second.
	// Minimum: 0
	OthersPerSec *int64 `json:"others_per_sec,omitempty"`

	// The number of bytes read per second.
	// Minimum: 0
	ReadBytesPerSec *int64 `json:"read_bytes_per_sec,omitempty"`

	// The number of read requests processed per second.
	// Minimum: 0
	ReadsPerSec *int64 `json:"reads_per_sec,omitempty"`

	// The time when the sample performance data was taken. Measured in milliseconds since the UNIX epoch.
	Time int64 `json:"time,omitempty"`

	// The average time it takes the array to process an I/O other request, measured in microseconds. The average time does not include SAN time, queue time, or QoS rate limit time.
	// Minimum: 0
	UsecPerOtherOp *int64 `json:"usec_per_other_op,omitempty"`

	// The average time it takes the array to process an I/O read request, measured in microseconds. The average time does not include SAN time, queue time, or QoS rate limit time.
	// Minimum: 0
	UsecPerReadOp *int64 `json:"usec_per_read_op,omitempty"`

	// The average time it takes the array to process an I/O write request, measured in microseconds. The average time does not include SAN time, queue time, or QoS rate limit time.
	// Minimum: 0
	UsecPerWriteOp *int64 `json:"usec_per_write_op,omitempty"`

	// The number of bytes written per second.
	// Minimum: 0
	WriteBytesPerSec *int64 `json:"write_bytes_per_sec,omitempty"`

	// The number of write requests processed per second.
	// Minimum: 0
	WritesPerSec *int64 `json:"writes_per_sec,omitempty"`
}

// Validate validates this directory performance Oai gen all of1
func (m *DirectoryPerformanceOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBytesPerOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesPerRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesPerWrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOthersPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadsPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsecPerOtherOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsecPerReadOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsecPerWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriteBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWritesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateBytesPerOp(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_op", "body", int64(*m.BytesPerOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateBytesPerRead(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerRead) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_read", "body", int64(*m.BytesPerRead), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateBytesPerWrite(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerWrite) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_write", "body", int64(*m.BytesPerWrite), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateOthersPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.OthersPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("others_per_sec", "body", int64(*m.OthersPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateReadBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadBytesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("read_bytes_per_sec", "body", int64(*m.ReadBytesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateReadsPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadsPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("reads_per_sec", "body", int64(*m.ReadsPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateUsecPerOtherOp(formats strfmt.Registry) error {

	if swag.IsZero(m.UsecPerOtherOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("usec_per_other_op", "body", int64(*m.UsecPerOtherOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateUsecPerReadOp(formats strfmt.Registry) error {

	if swag.IsZero(m.UsecPerReadOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("usec_per_read_op", "body", int64(*m.UsecPerReadOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateUsecPerWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.UsecPerWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("usec_per_write_op", "body", int64(*m.UsecPerWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateWriteBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.WriteBytesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("write_bytes_per_sec", "body", int64(*m.WriteBytesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryPerformanceOAIGenAllOf1) validateWritesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.WritesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("writes_per_sec", "body", int64(*m.WritesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryPerformanceOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryPerformanceOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res DirectoryPerformanceOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
