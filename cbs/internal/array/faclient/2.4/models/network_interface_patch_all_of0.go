// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkInterfacePatchAllOf0 network interface patch all of0
//
// swagger:model networkInterfacePatchAllOf0
type NetworkInterfacePatchAllOf0 struct {

	// Returns a value of `true` if the specified network interface or Fibre Channel port is enabled. Returns a value of `false` if the specified network interface or Fibre Channel port is disabled.
	Enabled bool `json:"enabled,omitempty"`

	// eth
	Eth *NetworkInterfacePatchAllOf0Eth `json:"eth,omitempty"`

	// N-Port ID Virtualization (NPIV) requires a balanced configuration of Fibre Channel ports configured for SCSI on both controllers. Enabling or Disabling a Fibre Channel port configured for SCSI might cause the NPIV status to change from enabled to disabled or vice versa. Set this option to proceed with enabling or disabling the port.
	OverrideNpivCheck bool `json:"override_npiv_check,omitempty"`
}

// Validate validates this network interface patch all of0
func (m *NetworkInterfacePatchAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterfacePatchAllOf0) validateEth(formats strfmt.Registry) error {

	if swag.IsZero(m.Eth) { // not required
		return nil
	}

	if m.Eth != nil {
		if err := m.Eth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkInterfacePatchAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkInterfacePatchAllOf0) UnmarshalBinary(b []byte) error {
	var res NetworkInterfacePatchAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
