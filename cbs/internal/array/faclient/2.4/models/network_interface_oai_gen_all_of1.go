// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkInterfaceOAIGenAllOf1 network interface Oai gen all of1
//
// swagger:model networkInterfaceOaiGenAllOf1
type NetworkInterfaceOAIGenAllOf1 struct {

	// Returns a value of `true` if the specified network interface or Fibre Channel port is enabled. Returns a value of `false` if the specified network interface or Fibre Channel port is disabled.
	// Read Only: true
	Enabled *bool `json:"enabled,omitempty"`

	// eth
	Eth *NetworkInterfaceOAIGenAllOf1Eth `json:"eth,omitempty"`

	// fc
	Fc *NetworkInterfaceOAIGenAllOf1Fc `json:"fc,omitempty"`

	// The interface type. Valid values are `eth` and `fc`.
	// Read Only: true
	InterfaceType string `json:"interface_type,omitempty"`

	// The services provided by the specified network interface or Fibre Channel port.
	// Read Only: true
	Services []string `json:"services"`

	// Configured speed of the specified network interface or Fibre Channel port (in Gb/s). Typically this is the maximum speed of the port or bond represented by the network interface.
	// Read Only: true
	Speed int64 `json:"speed,omitempty"`
}

// Validate validates this network interface Oai gen all of1
func (m *NetworkInterfaceOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterfaceOAIGenAllOf1) validateEth(formats strfmt.Registry) error {

	if swag.IsZero(m.Eth) { // not required
		return nil
	}

	if m.Eth != nil {
		if err := m.Eth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceOAIGenAllOf1) validateFc(formats strfmt.Registry) error {

	if swag.IsZero(m.Fc) { // not required
		return nil
	}

	if m.Fc != nil {
		if err := m.Fc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkInterfaceOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkInterfaceOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res NetworkInterfaceOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
