// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SoftwareOAIGen1AllOf1 Software to be installed on the array.
//
// swagger:model softwareOaiGen1AllOf1
type SoftwareOAIGen1AllOf1 struct {

	// The detailed reason of the `status`.
	Details string `json:"details,omitempty"`

	// A checksum hash referring to the update bundle.
	PayloadID string `json:"payload_id,omitempty"`

	// The progress of the software upgrade. Displayed in decimal format.
	Progress float32 `json:"progress,omitempty"`

	// The status of the software package. Valid values are `available`, `downloaded`, `downloading`, `download_failed`, `checking`, `installing`, `paused`, `aborting`, `abort`, `canceled`, `partially_installed`, and `installed`. A status of `available` indicates that the package is available for download. This only applies if `automatic-download` is not enabled. A status of `downloaded` indicates that the package is downloaded and ready for installation. A status of `downloading` indicates that the package is currently downloading. A status of `download_failed` indicates that the download of the package failed. A status of `checking` indicates that the package is currently running in `check-only` mode. A status of `installing` indicates that the package is currently installing. A status of `paused` indicates that the upgrade is paused and waiting for user input to proceed. A status of `aborting` indicates that the upgrade is being aborted, due to an unrecoverable error or an `abort` command issued by the user. A status of `canceled` indicates that the upgrade has been canceled. A status of `partially_installed` indicates that the upgrade has been partially installed due to an `abort`. The array has been upgraded to an intermediate version and the `software` is no longer available for installation. A status of `installed` indicates that the upgrade has finished.
	Status string `json:"status,omitempty"`

	// By which plan the upgrade will be conducted. The first element is the current version, the last element is the destination version, and the elements in between are intermediate versions.
	// Unique: true
	UpgradeHops []string `json:"upgrade_hops"`

	// The version of the software package.
	Version string `json:"version,omitempty"`
}

// Validate validates this software Oai gen1 all of1
func (m *SoftwareOAIGen1AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpgradeHops(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareOAIGen1AllOf1) validateUpgradeHops(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradeHops) { // not required
		return nil
	}

	if err := validate.UniqueItems("upgrade_hops", "body", m.UpgradeHops); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareOAIGen1AllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareOAIGen1AllOf1) UnmarshalBinary(b []byte) error {
	var res SoftwareOAIGen1AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
