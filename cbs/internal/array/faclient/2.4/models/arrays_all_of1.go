// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArraysAllOf1 arrays all of1
//
// swagger:model arraysAllOf1
type ArraysAllOf1 struct {

	// banner
	Banner string `json:"banner,omitempty"`

	// Usable capacity in bytes.
	// Read Only: true
	Capacity int64 `json:"capacity,omitempty"`

	// console lock enabled
	ConsoleLockEnabled bool `json:"console_lock_enabled,omitempty"`

	// Idle timeout in milliseconds. Valid values are `0` and any multiple of 60000 in the range of 300000 and 10800000. Any other values will be rounded down to the nearest multiple of 60000.
	IdleTimeout int32 `json:"idle_timeout,omitempty"`

	// ntp servers
	NtpServers []string `json:"ntp_servers"`

	// Valid values are `Purity`, `Purity//FA`, and `Purity//FB`.
	// Read Only: true
	Os string `json:"os,omitempty"`

	// A representation of data redundancy on the array. Data redundancy is rebuilt automatically by the system whenever parity is less than 1.0.
	// Read Only: true
	Parity float32 `json:"parity,omitempty"`

	// The SCSI timeout. This value defaults to 60s if it is not specified.
	ScsiTimeout int32 `json:"scsi_timeout,omitempty"`

	// space
	Space *Space `json:"space,omitempty"`

	// version
	// Read Only: true
	Version string `json:"version,omitempty"`
}

// Validate validates this arrays all of1
func (m *ArraysAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArraysAllOf1) validateSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArraysAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArraysAllOf1) UnmarshalBinary(b []byte) error {
	var res ArraysAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
