// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArrayConnectionOAIGenAllOf2 array connection Oai gen all of2
//
// swagger:model arrayConnectionOaiGenAllOf2
type ArrayConnectionOAIGenAllOf2 struct {

	// Management IP address or FQDN of the target array.
	ManagementAddress string `json:"management_address,omitempty"`

	// IP addresses of the target arrays when `replication_transport` is `ip`. WWNs of the target arrays when `replication_transport` is `fc`.
	ReplicationAddresses []string `json:"replication_addresses"`

	// The protocol used to transport data betwen the local array and the remote array. Valid values are `ip` and `fc`. The default is `ip`.
	ReplicationTransport string `json:"replication_transport,omitempty"`

	// Status of the connection. Valid values are `connected`, `connecting`, `partially_connected`, and `unbalanced`. A status of `connected` indicates that arrays are communicating. A status of `connecting` indicates that the array is trying to establish a connection. A status of `partially_connected` indicates that some replication addresses are communicating but others are not. A status of `unbalanced` indicates that the arrays are communicating, but the set of paths is either not redundant or not symmetric.
	Status string `json:"status,omitempty"`

	// throttle
	Throttle *Throttle `json:"throttle,omitempty"`

	// The type of replication. Valid values are `async-replication` and `sync-replication`.
	Type string `json:"type,omitempty"`

	// The version of the target array.
	Version string `json:"version,omitempty"`
}

// Validate validates this array connection Oai gen all of2
func (m *ArrayConnectionOAIGenAllOf2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateThrottle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArrayConnectionOAIGenAllOf2) validateThrottle(formats strfmt.Registry) error {

	if swag.IsZero(m.Throttle) { // not required
		return nil
	}

	if m.Throttle != nil {
		if err := m.Throttle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttle")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArrayConnectionOAIGenAllOf2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArrayConnectionOAIGenAllOf2) UnmarshalBinary(b []byte) error {
	var res ArrayConnectionOAIGenAllOf2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
