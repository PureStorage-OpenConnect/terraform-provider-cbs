// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectionAllOf0 connection all of0
//
// swagger:model connectionAllOf0
type ConnectionAllOf0 struct {

	// host
	Host *ConnectionOAIGen1Host `json:"host,omitempty"`

	// host group
	HostGroup *ConnectionOAIGen1HostGroup `json:"host_group,omitempty"`

	// The logical unit number (LUN) by which the specified hosts are to address the specified volume. If the LUN is not specified, the system automatically assigns a LUN to the connection. To automatically assign a LUN to a private connection, the system starts at LUN `1` and counts up to the maximum LUN `4095`, assigning the first available LUN to the connection. For shared connections, the system starts at LUN `254` and counts down to the minimum LUN `1`, assigning the first available LUN to the connection. If all LUNs in the `[1...254]` range are taken, the system starts at LUN `255` and counts up to the maximum LUN `4095`, assigning the first available LUN to the connection.
	// Maximum: 4095
	// Minimum: 1
	Lun int32 `json:"lun,omitempty"`

	// protocol endpoint
	ProtocolEndpoint *ConnectionOAIGen1ProtocolEndpoint `json:"protocol_endpoint,omitempty"`

	// volume
	Volume *ConnectionOAIGen1Volume `json:"volume,omitempty"`
}

// Validate validates this connection all of0
func (m *ConnectionAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionAllOf0) validateHost(formats strfmt.Registry) error {

	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionAllOf0) validateHostGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroup) { // not required
		return nil
	}

	if m.HostGroup != nil {
		if err := m.HostGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_group")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionAllOf0) validateLun(formats strfmt.Registry) error {

	if swag.IsZero(m.Lun) { // not required
		return nil
	}

	if err := validate.MinimumInt("lun", "body", int64(m.Lun), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("lun", "body", int64(m.Lun), 4095, false); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionAllOf0) validateProtocolEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtocolEndpoint) { // not required
		return nil
	}

	if m.ProtocolEndpoint != nil {
		if err := m.ProtocolEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol_endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionAllOf0) validateVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.Volume) { // not required
		return nil
	}

	if m.Volume != nil {
		if err := m.Volume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionAllOf0) UnmarshalBinary(b []byte) error {
	var res ConnectionAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
