// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SoftwareInstallationStepAllOf2 Step needed to complete an upgrade.
//
// swagger:model softwareInstallationStepAllOf2
type SoftwareInstallationStepAllOf2 struct {

	// A list of checks in this upgrade step.
	Checks []*SoftwareInstallationStepAllOf2ChecksItems `json:"checks"`

	// Detailed description of the step.
	Description string `json:"description,omitempty"`

	// Detailed result of the step used to diagnose step failures.
	Details string `json:"details,omitempty"`

	// The version to which the current hop is upgrading.
	HopVersion string `json:"hop_version,omitempty"`

	// installation
	Installation *SoftwareInstallationStepAllOf2Installation `json:"installation,omitempty"`

	// Status of the step. Valid values are `running` and `finished`. A status of `running` indicates that the step has not finished. A status of `finished` indicates that the check has finished.
	Status string `json:"status,omitempty"`
}

// Validate validates this software installation step all of2
func (m *SoftwareInstallationStepAllOf2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareInstallationStepAllOf2) validateChecks(formats strfmt.Registry) error {

	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks); i++ {
		if swag.IsZero(m.Checks[i]) { // not required
			continue
		}

		if m.Checks[i] != nil {
			if err := m.Checks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SoftwareInstallationStepAllOf2) validateInstallation(formats strfmt.Registry) error {

	if swag.IsZero(m.Installation) { // not required
		return nil
	}

	if m.Installation != nil {
		if err := m.Installation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("installation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareInstallationStepAllOf2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareInstallationStepAllOf2) UnmarshalBinary(b []byte) error {
	var res SoftwareInstallationStepAllOf2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
