// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditOAIGenAllOf1 audit Oai gen all of1
//
// swagger:model auditOaiGenAllOf1
type AuditOAIGenAllOf1 struct {

	// The arguments provided to the command.
	// Read Only: true
	Arguments string `json:"arguments,omitempty"`

	// The top level command that starts with the string "pure" as a convention.
	// Read Only: true
	Command string `json:"command,omitempty"`

	// origin
	Origin *AuditOAIGenAllOf1Origin `json:"origin,omitempty"`

	// The `command` and `subcommand` combination determines which action the user attempted to perform.
	// Read Only: true
	Subcommand string `json:"subcommand,omitempty"`

	// The time at which the command was run in milliseconds since the UNIX epoch.
	// Read Only: true
	Time int64 `json:"time,omitempty"`

	// The user who ran the command.
	// Read Only: true
	User string `json:"user,omitempty"`

	// The user interface through which the user session event was performed. Valid values are `CLI`, `GUI`, and `REST`.
	// Read Only: true
	UserInterface string `json:"user_interface,omitempty"`
}

// Validate validates this audit Oai gen all of1
func (m *AuditOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditOAIGenAllOf1) validateOrigin(formats strfmt.Registry) error {

	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	if m.Origin != nil {
		if err := m.Origin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res AuditOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
