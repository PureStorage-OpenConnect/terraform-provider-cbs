// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateSigningRequestPost SSL Certificate managed by Purity//FA.
//
// swagger:model certificateSigningRequestPost
type CertificateSigningRequestPost struct {

	// certificate
	Certificate *CertificateSigningRequestPostCertificate `json:"certificate,omitempty"`

	// The common name field listed in the certificate.
	CommonName string `json:"common_name,omitempty"`

	// Two-letter country (ISO) code listed in the certificate.
	Country string `json:"country,omitempty"`

	// The email field listed in the certificate.
	Email string `json:"email,omitempty"`

	// The locality field listed in the certificate.
	Locality string `json:"locality,omitempty"`

	// The organization field listed in the certificate.
	Organization string `json:"organization,omitempty"`

	// The organizational unit field listed in the certificate.
	OrganizationalUnit string `json:"organizational_unit,omitempty"`

	// The state/province field listed in the certificate.
	State string `json:"state,omitempty"`
}

// Validate validates this certificate signing request post
func (m *CertificateSigningRequestPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateSigningRequestPost) validateCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateSigningRequestPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateSigningRequestPost) UnmarshalBinary(b []byte) error {
	var res CertificateSigningRequestPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
