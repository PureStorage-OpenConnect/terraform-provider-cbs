// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodReplicaLinkLagOAIGenAllOf1 pod replica link lag Oai gen all of1
//
// swagger:model podReplicaLinkLagOaiGenAllOf1
type PodReplicaLinkLagOAIGenAllOf1 struct {

	// The direction of replication. Valid values include `inbound` and `outbound`.
	// Read Only: true
	Direction string `json:"direction,omitempty"`

	// lag
	Lag *PodReplicaLinkLagOAIGenAllOf1Lag `json:"lag,omitempty"`

	// local pod
	LocalPod *PodReplicaLinkLagOAIGenAllOf1LocalPod `json:"local_pod,omitempty"`

	// Time when the last piece of data was replicated, in milliseconds since the UNIX epoch, and the recovery point if the pod is promoted. If the pod is baselining then the value is `null`.
	// Read Only: true
	RecoveryPoint int64 `json:"recovery_point,omitempty"`

	// remote pod
	RemotePod *PodReplicaLinkLagOAIGenAllOf1RemotePod `json:"remote_pod,omitempty"`

	// Reference to a remote array.
	Remotes []*FixedReference `json:"remotes"`

	// Status of the replica-link. Valid values include `replicating`, `baselining`, `paused`, `quiescing`, `quiesced`, `idle`, and `unhealthy`.
	// Read Only: true
	Status string `json:"status,omitempty"`

	// Sample time in milliseconds since the UNIX epoch.
	Time int64 `json:"time,omitempty"`
}

// Validate validates this pod replica link lag Oai gen all of1
func (m *PodReplicaLinkLagOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalPod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotePod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodReplicaLinkLagOAIGenAllOf1) validateLag(formats strfmt.Registry) error {

	if swag.IsZero(m.Lag) { // not required
		return nil
	}

	if m.Lag != nil {
		if err := m.Lag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lag")
			}
			return err
		}
	}

	return nil
}

func (m *PodReplicaLinkLagOAIGenAllOf1) validateLocalPod(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalPod) { // not required
		return nil
	}

	if m.LocalPod != nil {
		if err := m.LocalPod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_pod")
			}
			return err
		}
	}

	return nil
}

func (m *PodReplicaLinkLagOAIGenAllOf1) validateRemotePod(formats strfmt.Registry) error {

	if swag.IsZero(m.RemotePod) { // not required
		return nil
	}

	if m.RemotePod != nil {
		if err := m.RemotePod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_pod")
			}
			return err
		}
	}

	return nil
}

func (m *PodReplicaLinkLagOAIGenAllOf1) validateRemotes(formats strfmt.Registry) error {

	if swag.IsZero(m.Remotes) { // not required
		return nil
	}

	for i := 0; i < len(m.Remotes); i++ {
		if swag.IsZero(m.Remotes[i]) { // not required
			continue
		}

		if m.Remotes[i] != nil {
			if err := m.Remotes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remotes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodReplicaLinkLagOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodReplicaLinkLagOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res PodReplicaLinkLagOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
