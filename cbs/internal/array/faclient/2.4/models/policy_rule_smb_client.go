// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyRuleSmbClient policy rule smb client
//
// swagger:model PolicyRuleSmbClient
type PolicyRuleSmbClient struct {

	// Specifies whether access to information is allowed for anonymous users. Returns a value of `false` if not specified.
	// Read Only: true
	AnonymousAccessAllowed *bool `json:"anonymous_access_allowed,omitempty"`

	// Specifies which clients are given access to the export. Accepted notation includes IP, IP mask, or hostname. The default is `*` if not specified.
	// Read Only: true
	Client string `json:"client,omitempty"`

	// Name of this rule. The name is automatically generated by the system.
	Name string `json:"name,omitempty"`

	// policy
	Policy *PolicyRuleSmbClientOAIGenPolicy `json:"policy,omitempty"`

	// Specifies whether the remote client is required to use SMB encryption. If not specified, defaults to `false`.
	// Read Only: true
	SmbEncryptionRequired *bool `json:"smb_encryption_required,omitempty"`
}

// Validate validates this policy rule smb client
func (m *PolicyRuleSmbClient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyRuleSmbClient) validatePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyRuleSmbClient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyRuleSmbClient) UnmarshalBinary(b []byte) error {
	var res PolicyRuleSmbClient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
