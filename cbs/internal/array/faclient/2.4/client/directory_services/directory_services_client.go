// Code generated by go-swagger; DO NOT EDIT.

package directory_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new directory services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for directory services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPI24DirectoryServices(params *GetAPI24DirectoryServicesParams) (*GetApi24DirectoryServicesOK, error)

	GetAPI24DirectoryServicesRoles(params *GetAPI24DirectoryServicesRolesParams) (*GetApi24DirectoryServicesRolesOK, error)

	GetAPI24DirectoryServicesTest(params *GetAPI24DirectoryServicesTestParams) (*GetApi24DirectoryServicesTestOK, error)

	PatchAPI24DirectoryServices(params *PatchAPI24DirectoryServicesParams) (*PatchApi24DirectoryServicesOK, error)

	PatchAPI24DirectoryServicesRoles(params *PatchAPI24DirectoryServicesRolesParams) (*PatchApi24DirectoryServicesRolesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPI24DirectoryServices lists directory services configuration

  Displays the role-based access control (RBAC) group configuration settings for manageability.
*/
func (a *Client) GetAPI24DirectoryServices(params *GetAPI24DirectoryServicesParams) (*GetApi24DirectoryServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24DirectoryServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24DirectoryServices",
		Method:             "GET",
		PathPattern:        "/api/2.4/directory-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24DirectoryServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24DirectoryServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24DirectoryServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24DirectoryServicesRoles lists directory services roles

  Displays the role-based access control (RBAC) group role settings.
*/
func (a *Client) GetAPI24DirectoryServicesRoles(params *GetAPI24DirectoryServicesRolesParams) (*GetApi24DirectoryServicesRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24DirectoryServicesRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24DirectoryServicesRoles",
		Method:             "GET",
		PathPattern:        "/api/2.4/directory-services/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24DirectoryServicesRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24DirectoryServicesRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24DirectoryServicesRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24DirectoryServicesTest lists directory services test results

  Displays the directory services test and displays the results. The test verifies that URIs can be resolved and that the array can bind and query the tree using the bind user credentials. The test also verifies that the array can find all configured groups to ensure the common names and group base are correctly configured.
*/
func (a *Client) GetAPI24DirectoryServicesTest(params *GetAPI24DirectoryServicesTestParams) (*GetApi24DirectoryServicesTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24DirectoryServicesTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24DirectoryServicesTest",
		Method:             "GET",
		PathPattern:        "/api/2.4/directory-services/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24DirectoryServicesTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24DirectoryServicesTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24DirectoryServicesTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24DirectoryServices modifies directory services configuration

  Modifies the directory service configuration.
*/
func (a *Client) PatchAPI24DirectoryServices(params *PatchAPI24DirectoryServicesParams) (*PatchApi24DirectoryServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24DirectoryServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24DirectoryServices",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/directory-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24DirectoryServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24DirectoryServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24DirectoryServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24DirectoryServicesRoles modifies directory services roles

  Modifies directory services roles, mapping them to their configured `group` and `group_base` in the directory service.
*/
func (a *Client) PatchAPI24DirectoryServicesRoles(params *PatchAPI24DirectoryServicesRolesParams) (*PatchApi24DirectoryServicesRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24DirectoryServicesRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24DirectoryServicesRoles",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/directory-services/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24DirectoryServicesRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24DirectoryServicesRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24DirectoryServicesRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
