// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostOauth210TokenParams creates a new PostOauth210TokenParams object
// with the default values initialized.
func NewPostOauth210TokenParams() *PostOauth210TokenParams {
	var (
		grantTypeDefault        = string("urn:ietf:params:oauth:grant-type:token-exchange")
		subjectTokenTypeDefault = string("urn:ietf:params:oauth:token-type:jwt")
	)
	return &PostOauth210TokenParams{
		GrantType:        grantTypeDefault,
		SubjectTokenType: subjectTokenTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostOauth210TokenParamsWithTimeout creates a new PostOauth210TokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostOauth210TokenParamsWithTimeout(timeout time.Duration) *PostOauth210TokenParams {
	var (
		grantTypeDefault        = string("urn:ietf:params:oauth:grant-type:token-exchange")
		subjectTokenTypeDefault = string("urn:ietf:params:oauth:token-type:jwt")
	)
	return &PostOauth210TokenParams{
		GrantType:        grantTypeDefault,
		SubjectTokenType: subjectTokenTypeDefault,

		timeout: timeout,
	}
}

// NewPostOauth210TokenParamsWithContext creates a new PostOauth210TokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostOauth210TokenParamsWithContext(ctx context.Context) *PostOauth210TokenParams {
	var (
		grantTypeDefault        = string("urn:ietf:params:oauth:grant-type:token-exchange")
		subjectTokenTypeDefault = string("urn:ietf:params:oauth:token-type:jwt")
	)
	return &PostOauth210TokenParams{
		GrantType:        grantTypeDefault,
		SubjectTokenType: subjectTokenTypeDefault,

		Context: ctx,
	}
}

// NewPostOauth210TokenParamsWithHTTPClient creates a new PostOauth210TokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostOauth210TokenParamsWithHTTPClient(client *http.Client) *PostOauth210TokenParams {
	var (
		grantTypeDefault        = string("urn:ietf:params:oauth:grant-type:token-exchange")
		subjectTokenTypeDefault = string("urn:ietf:params:oauth:token-type:jwt")
	)
	return &PostOauth210TokenParams{
		GrantType:        grantTypeDefault,
		SubjectTokenType: subjectTokenTypeDefault,
		HTTPClient:       client,
	}
}

/*PostOauth210TokenParams contains all the parameters to send to the API endpoint
for the post oauth210 token operation typically these are written to a http.Request
*/
type PostOauth210TokenParams struct {

	/*GrantType
	  The method by which the access token will be obtained. The Pure Storage REST API supports the OAuth 2.0 "token exchange" grant type, which indicates that a token exchange is being performed. Set `grant_type` to `urn:ietf:params:oauth:grant-type:token-exchange`.

	*/
	GrantType string
	/*SubjectToken
	  An encoded security ID Token representing the identity of the party on behalf of whom the request is being made. The token must be issued by a trusted identity provider which must be either a registered application in Pure1 or an enabled API client on the array. The token must be a JSON Web Token and must contain the following claims:
	> | JWT claim | Location | API Client Field | Description | Required By |
	> |-|-|-|-|-|
	> | kid | Header | key_id | Key ID of the API client that issues the identity token. | FlashArray and FlashBlade only. |
	> | aud | Payload | id | Client ID of the API client that issues the identity token. | FlashArray and FlashBlade only. |
	> | sub | Payload | | Login name of the array user for whom the token should be issued. This must be a valid user in the system. | FlashArray and FlashBlade only. |
	> | iss | Payload | issuer | Application ID for the Pure1 or API client's trusted identity issuer on the array. | All products. |
	> | iat | Payload | | Timestamp of when the identity token was issued. Measured in milliseconds since the UNIX epoch. | All products. |
	> | exp | Payload | | Timestamp of when the identity token will expire. Measured in milliseconds since the UNIX epoch. | All products. |

	Each token must also be signed with the private key that is paired with the API client's public key.

	*/
	SubjectToken string
	/*SubjectTokenType
	  An identifier that indicates the type of security token specifed in the `subject_token` parameter. The Pure Storage REST API supports the JSON Web Token (JWT) as the means for requesting the access token. Set `subject_token_type` to `urn:ietf:params:oauth:token-type:jwt`.

	*/
	SubjectTokenType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post oauth210 token params
func (o *PostOauth210TokenParams) WithTimeout(timeout time.Duration) *PostOauth210TokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post oauth210 token params
func (o *PostOauth210TokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post oauth210 token params
func (o *PostOauth210TokenParams) WithContext(ctx context.Context) *PostOauth210TokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post oauth210 token params
func (o *PostOauth210TokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post oauth210 token params
func (o *PostOauth210TokenParams) WithHTTPClient(client *http.Client) *PostOauth210TokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post oauth210 token params
func (o *PostOauth210TokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGrantType adds the grantType to the post oauth210 token params
func (o *PostOauth210TokenParams) WithGrantType(grantType string) *PostOauth210TokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the post oauth210 token params
func (o *PostOauth210TokenParams) SetGrantType(grantType string) {
	o.GrantType = grantType
}

// WithSubjectToken adds the subjectToken to the post oauth210 token params
func (o *PostOauth210TokenParams) WithSubjectToken(subjectToken string) *PostOauth210TokenParams {
	o.SetSubjectToken(subjectToken)
	return o
}

// SetSubjectToken adds the subjectToken to the post oauth210 token params
func (o *PostOauth210TokenParams) SetSubjectToken(subjectToken string) {
	o.SubjectToken = subjectToken
}

// WithSubjectTokenType adds the subjectTokenType to the post oauth210 token params
func (o *PostOauth210TokenParams) WithSubjectTokenType(subjectTokenType string) *PostOauth210TokenParams {
	o.SetSubjectTokenType(subjectTokenType)
	return o
}

// SetSubjectTokenType adds the subjectTokenType to the post oauth210 token params
func (o *PostOauth210TokenParams) SetSubjectTokenType(subjectTokenType string) {
	o.SubjectTokenType = subjectTokenType
}

// WriteToRequest writes these params to a swagger request
func (o *PostOauth210TokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param grant_type
	frGrantType := o.GrantType
	fGrantType := frGrantType
	if fGrantType != "" {
		if err := r.SetFormParam("grant_type", fGrantType); err != nil {
			return err
		}
	}

	// form param subject_token
	frSubjectToken := o.SubjectToken
	fSubjectToken := frSubjectToken
	if fSubjectToken != "" {
		if err := r.SetFormParam("subject_token", fSubjectToken); err != nil {
			return err
		}
	}

	// form param subject_token_type
	frSubjectTokenType := o.SubjectTokenType
	fSubjectTokenType := frSubjectTokenType
	if fSubjectTokenType != "" {
		if err := r.SetFormParam("subject_token_type", fSubjectTokenType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
