//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.2, generator: @autorest/go@4.0.0-preview.44)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package appcatalog

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
	"strings"
)

type searchClient struct {
	pl runtime.Pipeline
}

// newSearchClient creates a new instance of searchClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func newSearchClient(pl runtime.Pipeline) *searchClient {
	client := &searchClient{
		pl: pl,
	}
	return client
}

// Get - Get a list of azure marketplace catalog offers and total count and facets
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-08-17-preview
// language - Language to search, ISO 639-1 two-letter code, possible values - 'en,cs,de,es,fr,hu,it,ja,ko,nl,pl,pt-br,pt-pt,ru,sv,tr,zh-hans,zh-hant'
// selectParam - Array of fields to return. Such as 'pricingTypes'.
// * All: All fields.
// * Popularity: Popularity.
// * ApplicableProducts: Applicable Products.
// * CategoryIds: Category Ids.
// * Market: Market.
// * LinkedAddIns: Linked AddIns.
// * SupportedProducts: Supported Products.
// * HideKeys: Hide Keys.
// * PublisherId: Publisher Id.
// * CspStates: Csp States.
// * DisplayName: Display Name.
// * AzureBenefit: Azure Benefit.
// * Badges: Badges.
// * SmallIconUri: Small Icon Uri.
// * MediumIconUri: Medium Icon Uri.
// * LargeIconUri: Large Icon Uri.
// * WideIconUri: Wide Icon Uri.
// * IndustryCloud: Industry Cloud.
// * PublisherType: Publisher Type.
// * PublishingState: Publishing State.
// * Language: Language.
// * UniqueProductId: Unique Product Id.
// * ProductType: Product Type.
// * Plans: Plans.
// * OperatingSystems: Operating Systems.
// * PricingTypes: Pricing Types.
// * PublisherDisplayName: Publisher Display Name.
// * Summary: Summary.
// * VmImageGenerations: Vm Image Generations.
// * VmSecurityTypes: Vm Security Types.
// * VmArchitectureTypes: Vm Architecture Types.
// * Description: Description.
// * RatingBuckets: Rating Buckets.
// * RatingAverage: Rating Average.
// market - Product sold market, Possible values - https://docs.microsoft.com/en-us/azure/marketplace/marketplace-geo-availability-currencies.
// Such as 'US'
// xmsApp - The Application named property has the name of the client application that makes the request, used for tracing.
// Such as x-ms-app=appsource
// options - searchClientGetOptions contains the optional parameters for the searchClient.Get method.
func (client *searchClient) Get(ctx context.Context, language string, selectParam []SearchV2FieldName, market string, xmsApp string, options *searchClientGetOptions) (SearchClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, language, selectParam, market, xmsApp, options)
	if err != nil {
		return SearchClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SearchClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SearchClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *searchClient) getCreateRequest(ctx context.Context, language string, selectParam []SearchV2FieldName, market string, xmsApp string, options *searchClientGetOptions) (*policy.Request, error) {
	urlPath := "/search"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SearchQuery != nil {
		reqQP.Set("searchQuery", *options.SearchQuery)
	}
	if options != nil && options.PublisherDisplayName != nil {
		reqQP.Set("publisherDisplayName", *options.PublisherDisplayName)
	}
	if options != nil && options.AzureBenefit != nil {
		reqQP.Set("azureBenefit", string(*options.AzureBenefit))
	}
	if options != nil && options.PublisherTypes != nil {
		reqQP.Set("publisherTypes", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.PublisherTypes), "[]")), ","))
	}
	if options != nil && options.Badges != nil {
		reqQP.Set("badges", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.Badges), "[]")), ","))
	}
	if options != nil && options.IndustryCloud != nil {
		reqQP.Set("industryCloud", string(*options.IndustryCloud))
	}
	reqQP.Set("language", language)
	if options != nil && options.Gallery != nil {
		reqQP.Set("gallery", string(*options.Gallery))
	}
	reqQP.Set("select", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(selectParam), "[]")), ","))
	if options != nil && options.Orderby != nil {
		reqQP.Set("orderby", strings.Join(options.Orderby, ","))
	}
	if options != nil && options.ProductTypes != nil {
		reqQP.Set("productTypes", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.ProductTypes), "[]")), ","))
	}
	if options != nil && options.PricingTypes != nil {
		reqQP.Set("pricingTypes", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.PricingTypes), "[]")), ","))
	}
	if options != nil && options.Industries != nil {
		reqQP.Set("industries", strings.Join(options.Industries, ","))
	}
	if options != nil && options.OperatingSystems != nil {
		reqQP.Set("operatingSystems", strings.Join(options.OperatingSystems, ","))
	}
	if options != nil && options.HideKeys != nil {
		reqQP.Set("hideKeys", strings.Join(options.HideKeys, ","))
	}
	if options != nil && options.CategoryIDs != nil {
		reqQP.Set("categoryIds", strings.Join(options.CategoryIDs, ","))
	}
	reqQP.Set("market", market)
	if options != nil && options.LinkedAddIns != nil {
		reqQP.Set("linkedAddIns", strings.Join(options.LinkedAddIns, ","))
	}
	if options != nil && options.SupportedProducts != nil {
		reqQP.Set("supportedProducts", strings.Join(options.SupportedProducts, ","))
	}
	if options != nil && options.ApplicableProducts != nil {
		reqQP.Set("applicableProducts", strings.Join(options.ApplicableProducts, ","))
	}
	if options != nil && options.PublisherIDs != nil {
		reqQP.Set("publisherIds", strings.Join(options.PublisherIDs, ","))
	}
	if options != nil && options.RatingBuckets != nil {
		reqQP.Set("ratingBuckets", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.RatingBuckets), "[]")), ","))
	}
	if options != nil && options.VMImageGenerations != nil {
		reqQP.Set("vmImageGenerations", strings.Join(options.VMImageGenerations, ","))
	}
	if options != nil && options.VMArchitectureTypes != nil {
		reqQP.Set("vmArchitectureTypes", strings.Join(options.VMArchitectureTypes, ","))
	}
	if options != nil && options.VMSecurityTypes != nil {
		reqQP.Set("vmSecurityTypes", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.VMSecurityTypes), "[]")), ","))
	}
	if options != nil && options.PublishingStage != nil {
		reqQP.Set("publishingStage", string(*options.PublishingStage))
	}
	if options != nil && options.Facets != nil {
		reqQP.Set("facets", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.Facets), "[]")), ","))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2022-08-17-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["x-ms-app"] = []string{xmsApp}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *searchClient) getHandleResponse(resp *http.Response) (SearchClientGetResponse, error) {
	result := SearchClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SearchResponse); err != nil {
		return SearchClientGetResponse{}, err
	}
	return result, nil
}
