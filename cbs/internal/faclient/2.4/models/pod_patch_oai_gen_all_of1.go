// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodPatchOAIGenAllOf1 A pod is an administrative domain, a data container, and a namespace for volumes and protection groups.
//
// swagger:model podPatchOaiGenAllOf1
type PodPatchOAIGenAllOf1 struct {

	// If set to `true`, the pod has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed pod is permanently eradicated. A pod can only be destroyed if it is empty, so before destroying a pod, ensure all volumes and protection groups inside the pod have been either moved out of the pod or destroyed. A stretched pod cannot be destroyed unless you unstretch it first. Before the `time_remaining` period has elapsed, the destroyed pod can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the pod is permanently eradicated and can no longer be recovered.
	Destroyed bool `json:"destroyed,omitempty"`

	// Determines which array within a stretched pod should be given priority to stay online should the arrays ever lose contact with each other. The current array and any peer arrays that are connected to the current array for synchronous replication can be added to a pod for failover preference. By default, `failover_preferences=null`, meaning no arrays have been configured for failover preference. Enter multiple arrays in comma-separated format.
	FailoverPreferences []*Reference `json:"failover_preferences"`

	// Sets the URL of the mediator for this pod, replacing the URL of the current mediator. By default, the Pure1 Cloud Mediator (`purestorage`) serves as the mediator.
	Mediator string `json:"mediator,omitempty"`
}

// Validate validates this pod patch Oai gen all of1
func (m *PodPatchOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailoverPreferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodPatchOAIGenAllOf1) validateFailoverPreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.FailoverPreferences) { // not required
		return nil
	}

	for i := 0; i < len(m.FailoverPreferences); i++ {
		if swag.IsZero(m.FailoverPreferences[i]) { // not required
			continue
		}

		if m.FailoverPreferences[i] != nil {
			if err := m.FailoverPreferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failover_preferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodPatchOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodPatchOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res PodPatchOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
