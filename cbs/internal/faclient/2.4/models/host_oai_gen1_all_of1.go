// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HostOAIGen1AllOf1 host Oai gen1 all of1
//
// swagger:model hostOaiGen1AllOf1
type HostOAIGen1AllOf1 struct {

	// chap
	Chap *Chap `json:"chap,omitempty"`

	// The number of volumes connected to the specified host.
	// Read Only: true
	ConnectionCount int64 `json:"connection_count,omitempty"`

	// host group
	HostGroup *HostOAIGen1AllOf1HostGroup `json:"host_group,omitempty"`

	// The iSCSI qualified name (IQN) associated with the host.
	Iqns []string `json:"iqns"`

	// The NVMe Qualified Name (NQN) associated with the host.
	Nqns []string `json:"nqns"`

	// Determines how the system tunes the array to ensure that it works optimally with the host. Set `personality` to the name of the host operating system or virtual memory system. Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`, `oracle-vm-server`, `solaris`, and `vms`. If your system is not listed as one of the valid host personalities, do not set the option. By default, the personality is not set.
	Personality string `json:"personality,omitempty"`

	// port connectivity
	PortConnectivity *HostPortConnectivity `json:"port_connectivity,omitempty"`

	// For synchronous replication configurations, sets a host's preferred array to specify which array exposes active/optimized paths to that host. Enter multiple preferred arrays in comma-separated format. If a preferred array is set for a host, then the other arrays in the same pod will expose active/non-optimized paths to that host. If the host is in a host group, `preferred_arrays` cannot be set because host groups have their own preferred arrays. On a preferred array of a certain host, all the paths on all the ports (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths, while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths.
	PreferredArrays []*Reference `json:"preferred_arrays"`

	// space
	Space *HostOAIGen1AllOf1Space `json:"space,omitempty"`

	// The Fibre Channel World Wide Name (WWN) associated with the host.
	Wwns []string `json:"wwns"`
}

// Validate validates this host Oai gen1 all of1
func (m *HostOAIGen1AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortConnectivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredArrays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostOAIGen1AllOf1) validateChap(formats strfmt.Registry) error {

	if swag.IsZero(m.Chap) { // not required
		return nil
	}

	if m.Chap != nil {
		if err := m.Chap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chap")
			}
			return err
		}
	}

	return nil
}

func (m *HostOAIGen1AllOf1) validateHostGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroup) { // not required
		return nil
	}

	if m.HostGroup != nil {
		if err := m.HostGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_group")
			}
			return err
		}
	}

	return nil
}

func (m *HostOAIGen1AllOf1) validatePortConnectivity(formats strfmt.Registry) error {

	if swag.IsZero(m.PortConnectivity) { // not required
		return nil
	}

	if m.PortConnectivity != nil {
		if err := m.PortConnectivity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port_connectivity")
			}
			return err
		}
	}

	return nil
}

func (m *HostOAIGen1AllOf1) validatePreferredArrays(formats strfmt.Registry) error {

	if swag.IsZero(m.PreferredArrays) { // not required
		return nil
	}

	for i := 0; i < len(m.PreferredArrays); i++ {
		if swag.IsZero(m.PreferredArrays[i]) { // not required
			continue
		}

		if m.PreferredArrays[i] != nil {
			if err := m.PreferredArrays[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preferred_arrays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HostOAIGen1AllOf1) validateSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostOAIGen1AllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostOAIGen1AllOf1) UnmarshalBinary(b []byte) error {
	var res HostOAIGen1AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
