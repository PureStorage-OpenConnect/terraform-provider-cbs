// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PodPerformanceReplication pod performance replication
//
// swagger:model PodPerformanceReplication
type PodPerformanceReplication struct {

	// continuous bytes per sec
	ContinuousBytesPerSec *PodPerformanceReplicationOAIGenContinuousBytesPerSec `json:"continuous_bytes_per_sec,omitempty"`

	// periodic bytes per sec
	PeriodicBytesPerSec *PodPerformanceReplicationOAIGenPeriodicBytesPerSec `json:"periodic_bytes_per_sec,omitempty"`

	// pod
	Pod *PodPerformanceReplicationOAIGenPod `json:"pod,omitempty"`

	// resync bytes per sec
	ResyncBytesPerSec *PodPerformanceReplicationOAIGenResyncBytesPerSec `json:"resync_bytes_per_sec,omitempty"`

	// sync bytes per sec
	SyncBytesPerSec *PodPerformanceReplicationOAIGenSyncBytesPerSec `json:"sync_bytes_per_sec,omitempty"`

	// Sample time in milliseconds since the UNIX epoch.
	Time int64 `json:"time,omitempty"`

	// Total bytes transmitted and received per second for all types of replication.
	// Minimum: 0
	TotalBytesPerSec *int64 `json:"total_bytes_per_sec,omitempty"`
}

// Validate validates this pod performance replication
func (m *PodPerformanceReplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContinuousBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodicBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResyncBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodPerformanceReplication) validateContinuousBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.ContinuousBytesPerSec) { // not required
		return nil
	}

	if m.ContinuousBytesPerSec != nil {
		if err := m.ContinuousBytesPerSec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuous_bytes_per_sec")
			}
			return err
		}
	}

	return nil
}

func (m *PodPerformanceReplication) validatePeriodicBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.PeriodicBytesPerSec) { // not required
		return nil
	}

	if m.PeriodicBytesPerSec != nil {
		if err := m.PeriodicBytesPerSec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("periodic_bytes_per_sec")
			}
			return err
		}
	}

	return nil
}

func (m *PodPerformanceReplication) validatePod(formats strfmt.Registry) error {

	if swag.IsZero(m.Pod) { // not required
		return nil
	}

	if m.Pod != nil {
		if err := m.Pod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pod")
			}
			return err
		}
	}

	return nil
}

func (m *PodPerformanceReplication) validateResyncBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.ResyncBytesPerSec) { // not required
		return nil
	}

	if m.ResyncBytesPerSec != nil {
		if err := m.ResyncBytesPerSec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resync_bytes_per_sec")
			}
			return err
		}
	}

	return nil
}

func (m *PodPerformanceReplication) validateSyncBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.SyncBytesPerSec) { // not required
		return nil
	}

	if m.SyncBytesPerSec != nil {
		if err := m.SyncBytesPerSec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_bytes_per_sec")
			}
			return err
		}
	}

	return nil
}

func (m *PodPerformanceReplication) validateTotalBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalBytesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("total_bytes_per_sec", "body", int64(*m.TotalBytesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodPerformanceReplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodPerformanceReplication) UnmarshalBinary(b []byte) error {
	var res PodPerformanceReplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
