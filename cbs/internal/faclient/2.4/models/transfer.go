// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Transfer transfer
//
// swagger:model transfer
type Transfer struct {

	// The timestamp of when the snapshot replication process completed. Measured in milliseconds since the UNIX epoch.
	// Read Only: true
	Completed int64 `json:"completed,omitempty"`

	// The number of bytes transferred from the source to the target as part of the replication process. Measured in bytes.
	// Read Only: true
	DataTransferred int64 `json:"data_transferred,omitempty"`

	// Returns a value of `true` if the snapshot has been destroyed and is pending eradication. The destroyed snapshot can be recovered by setting `destroyed=false`. Once the eradication pending period has elapsed, the snapshot is permanently eradicated and can no longer be recovered.
	Destroyed bool `json:"destroyed,omitempty"`

	// The amount of physical/logical data written to the target due to replication. Measured in bytes.
	// Read Only: true
	PhysicalBytesWritten int64 `json:"physical_bytes_written,omitempty"`

	// The percentage progress of the snapshot transfer from the source array to the target. Displayed in decimal format.
	// Read Only: true
	Progress float32 `json:"progress,omitempty"`

	// The timestamp of when the snapshot replication process started. Measured in milliseconds since the UNIX epoch.
	// Read Only: true
	Started int64 `json:"started,omitempty"`
}

// Validate validates this transfer
func (m *Transfer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Transfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transfer) UnmarshalBinary(b []byte) error {
	var res Transfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
