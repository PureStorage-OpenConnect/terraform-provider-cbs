// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodReplicaLinkOAIGenAllOf1 pod replica link Oai gen all of1
//
// swagger:model podReplicaLinkOaiGenAllOf1
type PodReplicaLinkOAIGenAllOf1 struct {

	// The direction of replication. Valid values include `inbound` and `outbound`.
	// Read Only: true
	Direction string `json:"direction,omitempty"`

	// Duration in milliseconds that represents how far behind the replication target is from the source. This is the time difference between current time and `recovery_point`.
	// Read Only: true
	Lag int64 `json:"lag,omitempty"`

	// local pod
	LocalPod *PodReplicaLinkOAIGenAllOf1LocalPod `json:"local_pod,omitempty"`

	// Returns a value of `true` if the replica link is in a `paused` state. Returns a value of `false` if the replica link is not in a `paused` state.
	Paused bool `json:"paused,omitempty"`

	// Time when the last piece of data was replicated, in milliseconds since the UNIX epoch, and the recovery point if the target pod is promoted. If the pod is currently baselining, then the value is `null`.
	// Read Only: true
	RecoveryPoint int64 `json:"recovery_point,omitempty"`

	// remote pod
	RemotePod *PodReplicaLinkOAIGenAllOf1RemotePod `json:"remote_pod,omitempty"`

	// A list of remote arrays that share this pod.
	Remotes []*FixedReference `json:"remotes"`

	// Status of the replica-link. Valid values include `replicating`, `baselining`, `paused`, `quiescing`, `quiesced`, `idle`, and `unhealthy`.
	// Read Only: true
	Status string `json:"status,omitempty"`
}

// Validate validates this pod replica link Oai gen all of1
func (m *PodReplicaLinkOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalPod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotePod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodReplicaLinkOAIGenAllOf1) validateLocalPod(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalPod) { // not required
		return nil
	}

	if m.LocalPod != nil {
		if err := m.LocalPod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_pod")
			}
			return err
		}
	}

	return nil
}

func (m *PodReplicaLinkOAIGenAllOf1) validateRemotePod(formats strfmt.Registry) error {

	if swag.IsZero(m.RemotePod) { // not required
		return nil
	}

	if m.RemotePod != nil {
		if err := m.RemotePod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_pod")
			}
			return err
		}
	}

	return nil
}

func (m *PodReplicaLinkOAIGenAllOf1) validateRemotes(formats strfmt.Registry) error {

	if swag.IsZero(m.Remotes) { // not required
		return nil
	}

	for i := 0; i < len(m.Remotes); i++ {
		if swag.IsZero(m.Remotes[i]) { // not required
			continue
		}

		if m.Remotes[i] != nil {
			if err := m.Remotes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remotes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodReplicaLinkOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodReplicaLinkOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res PodReplicaLinkOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
