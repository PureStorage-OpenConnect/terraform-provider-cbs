// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PodOAIGen2AllOf1 A pod is an administrative domain, a data container, and a namespace for volumes and protection groups.
//
// swagger:model podOaiGen2AllOf1
type PodOAIGen2AllOf1 struct {

	// A list of arrays over which the pod is stretched. If there are two or more arrays in the stretched pod, all data in the pod is synchronously replicated between all of the arrays within the pod.
	// Min Items: 1
	Arrays []*PodArrayStatus `json:"arrays"`

	// Returns a value of `true` if the pod has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed pod is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed pod can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the pod is permanently eradicated and can no longer be recovered.
	Destroyed bool `json:"destroyed,omitempty"`

	// Determines which array within a stretched pod should be given priority to stay online should the arrays ever lose contact with each other. The current array and any peer arrays that are connected to the current array for synchronous replication can be added to a pod for failover preference. By default, `failover_preferences=null`, meaning no arrays have been configured for failover preference.
	FailoverPreferences []*Reference `json:"failover_preferences"`

	// The maximum amount of physical space the pod would take up on any array, ignoring any data shared outside the pod. Measured in bytes. The footprint metric is mostly used for capacity planning.
	// Minimum: 0
	Footprint *int64 `json:"footprint,omitempty"`

	// The URL of the mediator for the pod. By default, the Pure1 Cloud Mediator (`purestorage`) serves as the mediator.
	Mediator string `json:"mediator,omitempty"`

	// The mediator version.
	MediatorVersion string `json:"mediator_version,omitempty"`

	// source
	Source *PodOAIGen2AllOf1Source `json:"source,omitempty"`

	// space
	Space *PodOAIGen2AllOf1Space `json:"space,omitempty"`

	// The amount of time left until the destroyed pod is permanently eradicated. Measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed pod can be recovered by setting `destroyed=false`.
	// Read Only: true
	TimeRemaining int64 `json:"time_remaining,omitempty"`
}

// Validate validates this pod Oai gen2 all of1
func (m *PodOAIGen2AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFootprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodOAIGen2AllOf1) validateArrays(formats strfmt.Registry) error {

	if swag.IsZero(m.Arrays) { // not required
		return nil
	}

	iArraysSize := int64(len(m.Arrays))

	if err := validate.MinItems("arrays", "body", iArraysSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Arrays); i++ {
		if swag.IsZero(m.Arrays[i]) { // not required
			continue
		}

		if m.Arrays[i] != nil {
			if err := m.Arrays[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PodOAIGen2AllOf1) validateFailoverPreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.FailoverPreferences) { // not required
		return nil
	}

	for i := 0; i < len(m.FailoverPreferences); i++ {
		if swag.IsZero(m.FailoverPreferences[i]) { // not required
			continue
		}

		if m.FailoverPreferences[i] != nil {
			if err := m.FailoverPreferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failover_preferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PodOAIGen2AllOf1) validateFootprint(formats strfmt.Registry) error {

	if swag.IsZero(m.Footprint) { // not required
		return nil
	}

	if err := validate.MinimumInt("footprint", "body", int64(*m.Footprint), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PodOAIGen2AllOf1) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *PodOAIGen2AllOf1) validateSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodOAIGen2AllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodOAIGen2AllOf1) UnmarshalBinary(b []byte) error {
	var res PodOAIGen2AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
