// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TargetProtectionGroupPostPatchAllOf0 target protection group post patch all of0
//
// swagger:model targetProtectionGroupPostPatchAllOf0
type TargetProtectionGroupPostPatchAllOf0 struct {

	// If set to `true`, the target array has allowed the source array to replicate protection group data to the target array. If set to `false`, the target array has not allowed the source array to replicate protection group data to the target. target-protection-group
	Allowed bool `json:"allowed,omitempty"`

	// protection group
	ProtectionGroup *FixedReferenceNoID `json:"protection_group,omitempty"`

	// target
	Target *FixedReferenceNoID `json:"target,omitempty"`
}

// Validate validates this target protection group post patch all of0
func (m *TargetProtectionGroupPostPatchAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetProtectionGroupPostPatchAllOf0) validateProtectionGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtectionGroup) { // not required
		return nil
	}

	if m.ProtectionGroup != nil {
		if err := m.ProtectionGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_group")
			}
			return err
		}
	}

	return nil
}

func (m *TargetProtectionGroupPostPatchAllOf0) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetProtectionGroupPostPatchAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetProtectionGroupPostPatchAllOf0) UnmarshalBinary(b []byte) error {
	var res TargetProtectionGroupPostPatchAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
