// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminSettings Global settings for administrative accounts.
//
// swagger:model AdminSettings
type AdminSettings struct {

	// The lockout duration, in milliseconds, if a user is locked out after reaching the maximum number of login attempts. Ranges from 1 second to 90 days.
	// Maximum: 7.776e+09
	// Minimum: 1000
	LockoutDuration int64 `json:"lockout_duration,omitempty"`

	// Maximum number of failed login attempts allowed before the user is locked out.
	// Maximum: 20
	// Minimum: 1
	MaxLoginAttempts int32 `json:"max_login_attempts,omitempty"`

	// Minimum password length. If not specified, defaults to 1.
	MinPasswordLength int32 `json:"min_password_length,omitempty"`

	// If `true`, then single sign-on is enabled for the array.
	SingleSignOnEnabled bool `json:"single_sign_on_enabled,omitempty"`
}

// Validate validates this admin settings
func (m *AdminSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLockoutDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxLoginAttempts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminSettings) validateLockoutDuration(formats strfmt.Registry) error {

	if swag.IsZero(m.LockoutDuration) { // not required
		return nil
	}

	if err := validate.MinimumInt("lockout_duration", "body", int64(m.LockoutDuration), 1000, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("lockout_duration", "body", int64(m.LockoutDuration), 7.776e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *AdminSettings) validateMaxLoginAttempts(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxLoginAttempts) { // not required
		return nil
	}

	if err := validate.MinimumInt("max_login_attempts", "body", int64(m.MaxLoginAttempts), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("max_login_attempts", "body", int64(m.MaxLoginAttempts), 20, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdminSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminSettings) UnmarshalBinary(b []byte) error {
	var res AdminSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
