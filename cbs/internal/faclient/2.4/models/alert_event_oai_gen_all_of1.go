// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertEventOAIGenAllOf1 Alert timeline event.
//
// swagger:model alertEventOaiGenAllOf1
type AlertEventOAIGenAllOf1 struct {

	// Actual condition at the time the alert is created.
	// Read Only: true
	Actual string `json:"actual,omitempty"`

	// alert
	Alert *AlertEventOAIGenAllOf1Alert `json:"alert,omitempty"`

	// The parent alert number.
	// Read Only: true
	Code int64 `json:"code,omitempty"`

	// The component type of the alert.
	// Read Only: true
	ComponentName string `json:"component_name,omitempty"`

	// The component name of the alert.
	// Read Only: true
	ComponentType string `json:"component_type,omitempty"`

	// The time the parent alert was created.
	Created int64 `json:"created,omitempty"`

	// Expected state and threshold under normal conditions.
	// Read Only: true
	Expected string `json:"expected,omitempty"`

	// Information about the alert cause.
	// Read Only: true
	Issue string `json:"issue,omitempty"`

	// The knowledge base URL of the alert.
	// Read Only: true
	KnowledgeBaseURL string `json:"knowledge_base_url,omitempty"`

	// The severity level of the alert. Valid values include `info`, `warning`, `critical`, and `hidden`.
	// Read Only: true
	Severity string `json:"severity,omitempty"`

	// The state of the alert. Valid values include `open`, `closing`, and `closed`.
	// Read Only: true
	State string `json:"state,omitempty"`

	// A summary of the alert.
	// Read Only: true
	Summary string `json:"summary,omitempty"`

	// The time the event occurred.
	// Read Only: true
	Time int64 `json:"time,omitempty"`
}

// Validate validates this alert event Oai gen all of1
func (m *AlertEventOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertEventOAIGenAllOf1) validateAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.Alert) { // not required
		return nil
	}

	if m.Alert != nil {
		if err := m.Alert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alert")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertEventOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertEventOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res AlertEventOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
