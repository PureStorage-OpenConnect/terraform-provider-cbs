// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SNMPManagerPost snmp manager post
//
// swagger:model snmpManagerPost
type SNMPManagerPost struct {

	// DNS hostname or IP address of a computer that hosts an SNMP manager to which Purity//FA is to send trap messages when it generates alerts.
	Host string `json:"host,omitempty"`

	// The type of notification the agent will send. Valid values are `inform` and `trap`.
	Notification string `json:"notification,omitempty"`

	// v2c
	V2c *SNMPV2c `json:"v2c,omitempty"`

	// v3
	V3 *SNMPV3Post `json:"v3,omitempty"`

	// Version of the SNMP protocol to be used by Purity//FA to communicate with the specified manager. Valid values are `v2c` and `v3`.
	Version string `json:"version,omitempty"`
}

// Validate validates this snmp manager post
func (m *SNMPManagerPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateV2c(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SNMPManagerPost) validateV2c(formats strfmt.Registry) error {

	if swag.IsZero(m.V2c) { // not required
		return nil
	}

	if m.V2c != nil {
		if err := m.V2c.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v2c")
			}
			return err
		}
	}

	return nil
}

func (m *SNMPManagerPost) validateV3(formats strfmt.Registry) error {

	if swag.IsZero(m.V3) { // not required
		return nil
	}

	if m.V3 != nil {
		if err := m.V3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SNMPManagerPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SNMPManagerPost) UnmarshalBinary(b []byte) error {
	var res SNMPManagerPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
