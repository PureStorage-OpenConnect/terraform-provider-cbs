// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumePatchOAIGenAllOf2 volume patch Oai gen all of2
//
// swagger:model volumePatchOaiGenAllOf2
type VolumePatchOAIGenAllOf2 struct {

	// pod
	Pod *VolumePatchOAIGenAllOf2Pod `json:"pod,omitempty"`

	// Updates the virtual size of the volume. Measured in bytes.
	// Maximum: 4.503599627370496e+15
	Provisioned int64 `json:"provisioned,omitempty"`

	// qos
	Qos *VolumePatchOAIGenAllOf2Qos `json:"qos,omitempty"`

	// volume group
	VolumeGroup *VolumePatchOAIGenAllOf2VolumeGroup `json:"volume_group,omitempty"`
}

// Validate validates this volume patch Oai gen all of2
func (m *VolumePatchOAIGenAllOf2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumePatchOAIGenAllOf2) validatePod(formats strfmt.Registry) error {

	if swag.IsZero(m.Pod) { // not required
		return nil
	}

	if m.Pod != nil {
		if err := m.Pod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pod")
			}
			return err
		}
	}

	return nil
}

func (m *VolumePatchOAIGenAllOf2) validateProvisioned(formats strfmt.Registry) error {

	if swag.IsZero(m.Provisioned) { // not required
		return nil
	}

	if err := validate.MaximumInt("provisioned", "body", int64(m.Provisioned), 4.503599627370496e+15, false); err != nil {
		return err
	}

	return nil
}

func (m *VolumePatchOAIGenAllOf2) validateQos(formats strfmt.Registry) error {

	if swag.IsZero(m.Qos) { // not required
		return nil
	}

	if m.Qos != nil {
		if err := m.Qos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos")
			}
			return err
		}
	}

	return nil
}

func (m *VolumePatchOAIGenAllOf2) validateVolumeGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeGroup) { // not required
		return nil
	}

	if m.VolumeGroup != nil {
		if err := m.VolumeGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumePatchOAIGenAllOf2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumePatchOAIGenAllOf2) UnmarshalBinary(b []byte) error {
	var res VolumePatchOAIGenAllOf2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
