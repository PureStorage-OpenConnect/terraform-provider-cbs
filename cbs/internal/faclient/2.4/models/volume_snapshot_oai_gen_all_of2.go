// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VolumeSnapshotOAIGenAllOf2 A point-in-time image of the contents of the volume.
//
// swagger:model volumeSnapshotOaiGenAllOf2
type VolumeSnapshotOAIGenAllOf2 struct {

	// A serial number generated by the system when the snapshot is created. The serial number is unique across all arrays.
	// Read Only: true
	Serial string `json:"serial,omitempty"`

	// space
	Space *VolumeSnapshotOAIGenAllOf2Space `json:"space,omitempty"`

	// volume group
	VolumeGroup *VolumeSnapshotOAIGenAllOf2VolumeGroup `json:"volume_group,omitempty"`
}

// Validate validates this volume snapshot Oai gen all of2
func (m *VolumeSnapshotOAIGenAllOf2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeSnapshotOAIGenAllOf2) validateSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeSnapshotOAIGenAllOf2) validateVolumeGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeGroup) { // not required
		return nil
	}

	if m.VolumeGroup != nil {
		if err := m.VolumeGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeSnapshotOAIGenAllOf2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeSnapshotOAIGenAllOf2) UnmarshalBinary(b []byte) error {
	var res VolumeSnapshotOAIGenAllOf2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
