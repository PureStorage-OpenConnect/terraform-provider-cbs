// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyRuleNfsClient policy rule nfs client
//
// swagger:model PolicyRuleNfsClient
type PolicyRuleNfsClient struct {

	// Specifies access control for the export. Valid values are `root-squash` and `no-root-squash`. The default is `root-squash` if not specified.
	// Read Only: true
	Access string `json:"access,omitempty"`

	// Specifies the clients that will be permitted to access the export. Accepted notation includes IP, IP mask, or hostname. The default is `*` if not specified.
	// Read Only: true
	Client string `json:"client,omitempty"`

	// Name of this rule. The name is automatically generated by the system.
	Name string `json:"name,omitempty"`

	// Specifies which read-write client access permissions are allowed for the export. Valid values are `rw` and `ro`. The default is `rw` if not specified.
	Permission string `json:"permission,omitempty"`

	// policy
	Policy *PolicyRuleNfsClientOAIGenPolicy `json:"policy,omitempty"`
}

// Validate validates this policy rule nfs client
func (m *PolicyRuleNfsClient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyRuleNfsClient) validatePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyRuleNfsClient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyRuleNfsClient) UnmarshalBinary(b []byte) error {
	var res PolicyRuleNfsClient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
