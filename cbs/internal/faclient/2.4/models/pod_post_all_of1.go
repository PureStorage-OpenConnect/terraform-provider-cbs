// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodPostAllOf1 A pod is an administrative domain, a data container, and a namespace for volumes and protection groups.
//
// swagger:model podPostAllOf1
type PodPostAllOf1 struct {

	// Determines which array within a stretched pod should be given priority to stay online should the arrays ever lose contact with each other. The current array and any peer arrays that are connected to the current array for synchronous replication can be added to a pod for failover preference. By default, `failover_preferences=null`, meaning no arrays have been configured for failover preference. Enter multiple arrays in comma-separated format. To clear the list of failover preferences, set to an empty list `[]`.
	FailoverPreferences []*Reference `json:"failover_preferences"`

	// source
	Source *PodPostAllOf1Source `json:"source,omitempty"`
}

// Validate validates this pod post all of1
func (m *PodPostAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailoverPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodPostAllOf1) validateFailoverPreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.FailoverPreferences) { // not required
		return nil
	}

	for i := 0; i < len(m.FailoverPreferences); i++ {
		if swag.IsZero(m.FailoverPreferences[i]) { // not required
			continue
		}

		if m.FailoverPreferences[i] != nil {
			if err := m.FailoverPreferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failover_preferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PodPostAllOf1) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodPostAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodPostAllOf1) UnmarshalBinary(b []byte) error {
	var res PodPostAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
