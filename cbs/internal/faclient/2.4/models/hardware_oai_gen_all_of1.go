// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HardwareOAIGenAllOf1 hardware Oai gen all of1
//
// swagger:model hardwareOaiGenAllOf1
type HardwareOAIGenAllOf1 struct {

	// Details about the status of the component if not healthy.
	// Read Only: true
	Details string `json:"details,omitempty"`

	// If `true`, the ID LED is lit to visually identify the component.
	// Read Only: true
	IdentifyEnabled *bool `json:"identify_enabled,omitempty"`

	// Number that identifies the relative position of a hardware component within the array.
	// Read Only: true
	Index int32 `json:"index,omitempty"`

	// Model number of the hardware component.
	// Read Only: true
	Model string `json:"model,omitempty"`

	// Serial number of the hardware component.
	// Read Only: true
	Serial string `json:"serial,omitempty"`

	// Slot number occupied by the PCI Express card that hosts the component.
	// Read Only: true
	Slot int32 `json:"slot,omitempty"`

	// Speed (in bytes per second) at which the component is operating.
	// Read Only: true
	Speed int64 `json:"speed,omitempty"`

	// Component status. Values include `critical`, `healthy`, `identifying`, `unhealthy`, `unknown`, and `unused`.
	// Read Only: true
	Status string `json:"status,omitempty"`

	// Temperature (in degrees Celsius) reported by the component.
	// Read Only: true
	Temperature int32 `json:"temperature,omitempty"`

	// Type of hardware component. Values include `bay`, `ct`, `ch`, `eth`, `fan`, `fb`, `fc`, `fm`, `ib`, `iom`, `nvb`, `pwr`, `sas`, `sh`, and `tmp`.
	// Read Only: true
	Type string `json:"type,omitempty"`

	// Voltage (in Volts) reported by the component.
	// Read Only: true
	Voltage int32 `json:"voltage,omitempty"`
}

// Validate validates this hardware Oai gen all of1
func (m *HardwareOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HardwareOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res HardwareOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
