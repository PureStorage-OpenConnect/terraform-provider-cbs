// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectionPost connection post
//
// swagger:model connectionPost
type ConnectionPost struct {

	// The logical unit number (LUN) by which the specified hosts are to address the specified volume. If the LUN is not specified, the system automatically assigns a LUN to the connection. To automatically assign a LUN to a private connection, the system starts at LUN `1` and counts up to the maximum LUN `4095`, assigning the first available LUN to the connection. For shared connections, the system starts at LUN `254` and counts down to the minimum LUN `1`, assigning the first available LUN to the connection. If all LUNs in the `[1...254]` range are taken, the system starts at LUN `255` and counts up to the maximum LUN `4095`, assigning the first available LUN to the connection.
	// Maximum: 4095
	// Minimum: 1
	Lun int32 `json:"lun,omitempty"`

	// protocol endpoint
	ProtocolEndpoint *ConnectionPostProtocolEndpoint `json:"protocol_endpoint,omitempty"`
}

// Validate validates this connection post
func (m *ConnectionPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionPost) validateLun(formats strfmt.Registry) error {

	if swag.IsZero(m.Lun) { // not required
		return nil
	}

	if err := validate.MinimumInt("lun", "body", int64(m.Lun), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("lun", "body", int64(m.Lun), 4095, false); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionPost) validateProtocolEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtocolEndpoint) { // not required
		return nil
	}

	if m.ProtocolEndpoint != nil {
		if err := m.ProtocolEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol_endpoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionPost) UnmarshalBinary(b []byte) error {
	var res ConnectionPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
