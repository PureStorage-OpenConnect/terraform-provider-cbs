// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicaLinkPerformanceReplication replica link performance replication
//
// swagger:model replicaLinkPerformanceReplication
type ReplicaLinkPerformanceReplication struct {

	// The number of bytes received per second from a remote array.
	// Minimum: 0
	BytesPerSecFromRemote *int64 `json:"bytes_per_sec_from_remote,omitempty"`

	// The number of bytes transmitted per second to a remote array.
	// Minimum: 0
	BytesPerSecToRemote *int64 `json:"bytes_per_sec_to_remote,omitempty"`

	// Total bytes transmitted and received per second.
	// Minimum: 0
	BytesPerSecTotal *int64 `json:"bytes_per_sec_total,omitempty"`

	// The direction of replication. Valid values are `inbound` and `outbound`.
	Direction string `json:"direction,omitempty"`

	// local pod
	LocalPod *ReplicaLinkPerformanceReplicationLocalPod `json:"local_pod,omitempty"`

	// remote pod
	RemotePod *ReplicaLinkPerformanceReplicationRemotePod `json:"remote_pod,omitempty"`

	// Reference to a remote array.
	Remotes []*FixedReference `json:"remotes"`

	// Sample time in milliseconds since the UNIX epoch.
	Time int64 `json:"time,omitempty"`
}

// Validate validates this replica link performance replication
func (m *ReplicaLinkPerformanceReplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBytesPerSecFromRemote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesPerSecToRemote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesPerSecTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalPod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotePod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaLinkPerformanceReplication) validateBytesPerSecFromRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerSecFromRemote) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_sec_from_remote", "body", int64(*m.BytesPerSecFromRemote), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaLinkPerformanceReplication) validateBytesPerSecToRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerSecToRemote) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_sec_to_remote", "body", int64(*m.BytesPerSecToRemote), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaLinkPerformanceReplication) validateBytesPerSecTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerSecTotal) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_sec_total", "body", int64(*m.BytesPerSecTotal), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaLinkPerformanceReplication) validateLocalPod(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalPod) { // not required
		return nil
	}

	if m.LocalPod != nil {
		if err := m.LocalPod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_pod")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaLinkPerformanceReplication) validateRemotePod(formats strfmt.Registry) error {

	if swag.IsZero(m.RemotePod) { // not required
		return nil
	}

	if m.RemotePod != nil {
		if err := m.RemotePod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_pod")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaLinkPerformanceReplication) validateRemotes(formats strfmt.Registry) error {

	if swag.IsZero(m.Remotes) { // not required
		return nil
	}

	for i := 0; i < len(m.Remotes); i++ {
		if swag.IsZero(m.Remotes[i]) { // not required
			continue
		}

		if m.Remotes[i] != nil {
			if err := m.Remotes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remotes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicaLinkPerformanceReplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicaLinkPerformanceReplication) UnmarshalBinary(b []byte) error {
	var res ReplicaLinkPerformanceReplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
