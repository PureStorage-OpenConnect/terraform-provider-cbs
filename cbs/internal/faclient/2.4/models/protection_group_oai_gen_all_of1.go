// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionGroupOAIGenAllOf1 A protection group defines a set of either volumes, hosts, or host groups (called members) that are protected together through snapshots with point-in-time consistency across the member volumes. The members within the protection group have common data protection requirements and share the same snapshot, replication, and retention schedules.
//
// swagger:model protectionGroupOaiGenAllOf1
type ProtectionGroupOAIGenAllOf1 struct {

	// Has this protection group been destroyed? To destroy a protection group, patch to `true`. To recover a destroyed protection group, patch to `false`. If not specified, defaults to `false`.
	Destroyed bool `json:"destroyed,omitempty"`

	// Number of hosts in this protection group.
	// Read Only: true
	HostCount int64 `json:"host_count,omitempty"`

	// Number of host groups in this protection group.
	// Read Only: true
	HostGroupCount int64 `json:"host_group_count,omitempty"`

	// If set to `true`, the protection group belongs to the local array. If set to `false`, the protection group belongs to the remote array.
	// Read Only: true
	IsLocal *bool `json:"is_local,omitempty"`

	// pod
	Pod *ProtectionGroupOAIGenAllOf1Pod `json:"pod,omitempty"`

	// replication schedule
	ReplicationSchedule *ProtectionGroupOAIGenAllOf1ReplicationSchedule `json:"replication_schedule,omitempty"`

	// snapshot schedule
	SnapshotSchedule *ProtectionGroupOAIGenAllOf1SnapshotSchedule `json:"snapshot_schedule,omitempty"`

	// source
	Source *ProtectionGroupOAIGenAllOf1Source `json:"source,omitempty"`

	// source retention
	SourceRetention *ProtectionGroupOAIGenAllOf1SourceRetention `json:"source_retention,omitempty"`

	// space
	Space *ProtectionGroupOAIGenAllOf1Space `json:"space,omitempty"`

	// The number of targets to where this protection group replicates.
	// Read Only: true
	TargetCount int64 `json:"target_count,omitempty"`

	// target retention
	TargetRetention *ProtectionGroupOAIGenAllOf1TargetRetention `json:"target_retention,omitempty"`

	// The amount of time left until the destroyed protection group is permanently eradicated. Measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed protection group can be recovered by setting `destroyed=false`.
	// Read Only: true
	TimeRemaining int64 `json:"time_remaining,omitempty"`

	// The number of volumes in the protection group.
	// Read Only: true
	VolumeCount int64 `json:"volume_count,omitempty"`
}

// Validate validates this protection group Oai gen all of1
func (m *ProtectionGroupOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionGroupOAIGenAllOf1) validatePod(formats strfmt.Registry) error {

	if swag.IsZero(m.Pod) { // not required
		return nil
	}

	if m.Pod != nil {
		if err := m.Pod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pod")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionGroupOAIGenAllOf1) validateReplicationSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationSchedule) { // not required
		return nil
	}

	if m.ReplicationSchedule != nil {
		if err := m.ReplicationSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionGroupOAIGenAllOf1) validateSnapshotSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.SnapshotSchedule) { // not required
		return nil
	}

	if m.SnapshotSchedule != nil {
		if err := m.SnapshotSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionGroupOAIGenAllOf1) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionGroupOAIGenAllOf1) validateSourceRetention(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceRetention) { // not required
		return nil
	}

	if m.SourceRetention != nil {
		if err := m.SourceRetention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_retention")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionGroupOAIGenAllOf1) validateSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionGroupOAIGenAllOf1) validateTargetRetention(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetRetention) { // not required
		return nil
	}

	if m.TargetRetention != nil {
		if err := m.TargetRetention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_retention")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionGroupOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionGroupOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res ProtectionGroupOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
