// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceAllOf1 performance all of1
//
// swagger:model performanceAllOf1
type PerformanceAllOf1 struct {

	// The percentage reduction in `service_usec_per_read_op` due to data cache hits. For example, a value of 0.25 indicates that the value of `service_usec_per_read_op` is 25&#37; lower than it would have been without any data cache hits.
	// Maximum: 1
	// Minimum: 0
	ServiceUsecPerReadOpCacheReduction *float32 `json:"service_usec_per_read_op_cache_reduction,omitempty"`
}

// Validate validates this performance all of1
func (m *PerformanceAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceUsecPerReadOpCacheReduction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceAllOf1) validateServiceUsecPerReadOpCacheReduction(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceUsecPerReadOpCacheReduction) { // not required
		return nil
	}

	if err := validate.Minimum("service_usec_per_read_op_cache_reduction", "body", float64(*m.ServiceUsecPerReadOpCacheReduction), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("service_usec_per_read_op_cache_reduction", "body", float64(*m.ServiceUsecPerReadOpCacheReduction), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceAllOf1) UnmarshalBinary(b []byte) error {
	var res PerformanceAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
