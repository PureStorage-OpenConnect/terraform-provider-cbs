// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubnetPost subnet post
//
// swagger:model subnetPost
type SubnetPost struct {

	// Returns a value of `true` if subnet is enabled. Returns a value of `false` if subnet is disabled. If not specified, defaults to `true`.
	Enabled bool `json:"enabled,omitempty"`

	// The IPv4 or IPv6 address of the gateway through which the specified subnet is to communicate with the network.
	Gateway string `json:"gateway,omitempty"`

	// Maximum message transfer unit (packet) size for the subnet in bytes. MTU setting cannot exceed the MTU of the corresponding physical interface. If not specified, defaults to `1500`.
	// Maximum: 9216
	// Minimum: 1280
	Mtu int32 `json:"mtu,omitempty"`

	// The IPv4 or IPv6 address to be associated with the specified subnet.
	Prefix string `json:"prefix,omitempty"`

	// VLAN ID number.
	Vlan int32 `json:"vlan,omitempty"`
}

// Validate validates this subnet post
func (m *SubnetPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetPost) validateMtu(formats strfmt.Registry) error {

	if swag.IsZero(m.Mtu) { // not required
		return nil
	}

	if err := validate.MinimumInt("mtu", "body", int64(m.Mtu), 1280, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("mtu", "body", int64(m.Mtu), 9216, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubnetPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubnetPost) UnmarshalBinary(b []byte) error {
	var res SubnetPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
