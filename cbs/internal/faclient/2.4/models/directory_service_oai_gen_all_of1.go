// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectoryServiceOAIGenAllOf1 Configuration information for the directory service.
//
// swagger:model directoryServiceOaiGenAllOf1
type DirectoryServiceOAIGenAllOf1 struct {

	// Base of the Distinguished Name (DN) of the directory service groups.
	BaseDn string `json:"base_dn,omitempty"`

	// Masked password used to query the directory.
	BindPassword string `json:"bind_password,omitempty"`

	// Username used to query the directory.
	BindUser string `json:"bind_user,omitempty"`

	// The certificate of the Certificate Authority (CA) that signed the certificates of the directory servers, which is used to validate the authenticity of the configured servers.
	// Max Length: 3000
	CaCertificate string `json:"ca_certificate,omitempty"`

	// Whether or not server authenticity is enforced when a certificate is provided.
	CheckPeer bool `json:"check_peer,omitempty"`

	// Whether or not the directory service is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// management
	Management *DirectoryServiceOAIGenAllOf1Management `json:"management,omitempty"`

	// Services for which the directory service configuration is used.
	// Read Only: true
	Services []string `json:"services"`

	// List of URIs for the configured directory servers.
	// Max Length: 30
	Uris []string `json:"uris"`
}

// Validate validates this directory service Oai gen all of1
func (m *DirectoryServiceOAIGenAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUris(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryServiceOAIGenAllOf1) validateCaCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.CaCertificate) { // not required
		return nil
	}

	if err := validate.MaxLength("ca_certificate", "body", string(m.CaCertificate), 3000); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryServiceOAIGenAllOf1) validateManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.Management) { // not required
		return nil
	}

	if m.Management != nil {
		if err := m.Management.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management")
			}
			return err
		}
	}

	return nil
}

func (m *DirectoryServiceOAIGenAllOf1) validateUris(formats strfmt.Registry) error {

	if swag.IsZero(m.Uris) { // not required
		return nil
	}

	for i := 0; i < len(m.Uris); i++ {

		if err := validate.Pattern("uris"+"."+strconv.Itoa(i), "body", string(m.Uris[i]), `^(ldap|ldaps)`); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryServiceOAIGenAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryServiceOAIGenAllOf1) UnmarshalBinary(b []byte) error {
	var res DirectoryServiceOAIGenAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
