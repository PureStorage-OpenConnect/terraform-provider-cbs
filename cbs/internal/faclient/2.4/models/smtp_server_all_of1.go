// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SMTPServerAllOf1 smtp server all of1
//
// swagger:model smtpServerAllOf1
type SMTPServerAllOf1 struct {

	// Password for the relay host, if needed.
	Password string `json:"password,omitempty"`

	// Relay server used as a forwarding point for email sent from the array. Can be set as a hostname, IPv4 address, or IPv6 address, with optional port numbers. The expected format for IPv4 is `ddd.ddd.ddd.ddd:PORT`. The expected format for IPv6 is `xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx` or, if a port number is specified, `[xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx]:PORT`.
	RelayHost string `json:"relay_host,omitempty"`

	// Domain name appended to alert email messages.
	SenderDomain string `json:"sender_domain,omitempty"`

	// User name for the relay host, if needed.
	UserName string `json:"user_name,omitempty"`
}

// Validate validates this smtp server all of1
func (m *SMTPServerAllOf1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SMTPServerAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SMTPServerAllOf1) UnmarshalBinary(b []byte) error {
	var res SMTPServerAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
