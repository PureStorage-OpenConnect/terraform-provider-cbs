// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceAllOf0 performance all of0
//
// swagger:model performanceAllOf0
type PerformanceAllOf0 struct {

	// The average I/O size per mirrored write. Measured in bytes.
	// Minimum: 0
	BytesPerMirroredWrite *int64 `json:"bytes_per_mirrored_write,omitempty"`

	// The average I/O size for both read and write (all) operations.
	// Minimum: 0
	BytesPerOp *int64 `json:"bytes_per_op,omitempty"`

	// The average I/O size per read. Measured in bytes.
	// Minimum: 0
	BytesPerRead *int64 `json:"bytes_per_read,omitempty"`

	// The average I/O size per write. Measured in bytes.
	// Minimum: 0
	BytesPerWrite *int64 `json:"bytes_per_write,omitempty"`

	// The number of mirrored bytes written per second.
	// Minimum: 0
	MirroredWriteBytesPerSec *int64 `json:"mirrored_write_bytes_per_sec,omitempty"`

	// The number of mirrored writes per second.
	// Minimum: 0
	MirroredWritesPerSec *int64 `json:"mirrored_writes_per_sec,omitempty"`

	// The average time it takes the array to process a mirrored I/O write request. Measured in microseconds.
	// Minimum: 0
	QosRateLimitUsecPerMirroredWriteOp *int64 `json:"qos_rate_limit_usec_per_mirrored_write_op,omitempty"`

	// The average time spent waiting due to QoS rate limiting for a read request. Measured in microseconds.
	// Minimum: 0
	QosRateLimitUsecPerReadOp *int64 `json:"qos_rate_limit_usec_per_read_op,omitempty"`

	// The average time that a write I/O request spends waiting as a result of the volume reaching its QoS bandwidth limit. Measured in microseconds.
	// Minimum: 0
	QosRateLimitUsecPerWriteOp *int64 `json:"qos_rate_limit_usec_per_write_op,omitempty"`

	// The average time that a mirrored write I/O request spends in the array waiting to be served. Measured in microseconds.
	// Minimum: 0
	QueueUsecPerMirroredWriteOp *int64 `json:"queue_usec_per_mirrored_write_op,omitempty"`

	// The average time that a read I/O request spends in the array waiting to be served. Measured in microseconds.
	// Minimum: 0
	QueueUsecPerReadOp *int64 `json:"queue_usec_per_read_op,omitempty"`

	// The average time that a write I/O request spends in the array waiting to be served. Measured in microseconds.
	// Minimum: 0
	QueueUsecPerWriteOp *int64 `json:"queue_usec_per_write_op,omitempty"`

	// The number of bytes read per second.
	// Minimum: 0
	ReadBytesPerSec *int64 `json:"read_bytes_per_sec,omitempty"`

	// The number of read requests processed per second.
	// Minimum: 0
	ReadsPerSec *int64 `json:"reads_per_sec,omitempty"`

	// The average time required to transfer data from the initiator to the array for a mirrored write request. Measured in microseconds.
	// Minimum: 0
	SanUsecPerMirroredWriteOp *int64 `json:"san_usec_per_mirrored_write_op,omitempty"`

	// The average time required to transfer data from the array to the initiator for a read request. Measured in microseconds.
	// Minimum: 0
	SanUsecPerReadOp *int64 `json:"san_usec_per_read_op,omitempty"`

	// The average time required to transfer data from the initiator to the array for a write request. Measured in microseconds.
	// Minimum: 0
	SanUsecPerWriteOp *int64 `json:"san_usec_per_write_op,omitempty"`

	// The average time required for the array to service a mirrored write request. Measured in microseconds.
	// Minimum: 0
	ServiceUsecPerMirroredWriteOp *int64 `json:"service_usec_per_mirrored_write_op,omitempty"`

	// The average time required for the array to service a read request. Measured in microseconds.
	// Minimum: 0
	ServiceUsecPerReadOp *int64 `json:"service_usec_per_read_op,omitempty"`

	// The average time required for the array to service a write request. Measured in microseconds.
	// Minimum: 0
	ServiceUsecPerWriteOp *int64 `json:"service_usec_per_write_op,omitempty"`

	// The time when the sample performance data was taken. Measured in milliseconds since the UNIX epoch.
	Time int64 `json:"time,omitempty"`

	// The average time it takes the array to process a mirrored I/O write request. Measured in microseconds. The average time does not include SAN time, queue time, or QoS rate limit time.
	// Minimum: 0
	UsecPerMirroredWriteOp *int64 `json:"usec_per_mirrored_write_op,omitempty"`

	// The average time it takes the array to process an I/O read request. Measured in microseconds. The average time does not include SAN time, queue time, or QoS rate limit time.
	// Minimum: 0
	UsecPerReadOp *int64 `json:"usec_per_read_op,omitempty"`

	// The average time it takes the array to process an I/O write request. Measured in microseconds. The average time does not include SAN time, queue time, or QoS rate limit time.
	// Minimum: 0
	UsecPerWriteOp *int64 `json:"usec_per_write_op,omitempty"`

	// The number of bytes written per second.
	// Minimum: 0
	WriteBytesPerSec *int64 `json:"write_bytes_per_sec,omitempty"`

	// The number of write requests processed per second.
	// Minimum: 0
	WritesPerSec *int64 `json:"writes_per_sec,omitempty"`
}

// Validate validates this performance all of0
func (m *PerformanceAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBytesPerMirroredWrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesPerOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesPerRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesPerWrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMirroredWriteBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMirroredWritesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosRateLimitUsecPerMirroredWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosRateLimitUsecPerReadOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosRateLimitUsecPerWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueUsecPerMirroredWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueUsecPerReadOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueUsecPerWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadsPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanUsecPerMirroredWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanUsecPerReadOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanUsecPerWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceUsecPerMirroredWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceUsecPerReadOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceUsecPerWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsecPerMirroredWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsecPerReadOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsecPerWriteOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriteBytesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWritesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceAllOf0) validateBytesPerMirroredWrite(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerMirroredWrite) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_mirrored_write", "body", int64(*m.BytesPerMirroredWrite), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateBytesPerOp(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_op", "body", int64(*m.BytesPerOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateBytesPerRead(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerRead) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_read", "body", int64(*m.BytesPerRead), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateBytesPerWrite(formats strfmt.Registry) error {

	if swag.IsZero(m.BytesPerWrite) { // not required
		return nil
	}

	if err := validate.MinimumInt("bytes_per_write", "body", int64(*m.BytesPerWrite), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateMirroredWriteBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.MirroredWriteBytesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("mirrored_write_bytes_per_sec", "body", int64(*m.MirroredWriteBytesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateMirroredWritesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.MirroredWritesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("mirrored_writes_per_sec", "body", int64(*m.MirroredWritesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateQosRateLimitUsecPerMirroredWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.QosRateLimitUsecPerMirroredWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("qos_rate_limit_usec_per_mirrored_write_op", "body", int64(*m.QosRateLimitUsecPerMirroredWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateQosRateLimitUsecPerReadOp(formats strfmt.Registry) error {

	if swag.IsZero(m.QosRateLimitUsecPerReadOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("qos_rate_limit_usec_per_read_op", "body", int64(*m.QosRateLimitUsecPerReadOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateQosRateLimitUsecPerWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.QosRateLimitUsecPerWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("qos_rate_limit_usec_per_write_op", "body", int64(*m.QosRateLimitUsecPerWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateQueueUsecPerMirroredWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueUsecPerMirroredWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("queue_usec_per_mirrored_write_op", "body", int64(*m.QueueUsecPerMirroredWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateQueueUsecPerReadOp(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueUsecPerReadOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("queue_usec_per_read_op", "body", int64(*m.QueueUsecPerReadOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateQueueUsecPerWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueUsecPerWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("queue_usec_per_write_op", "body", int64(*m.QueueUsecPerWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateReadBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadBytesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("read_bytes_per_sec", "body", int64(*m.ReadBytesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateReadsPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadsPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("reads_per_sec", "body", int64(*m.ReadsPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateSanUsecPerMirroredWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.SanUsecPerMirroredWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("san_usec_per_mirrored_write_op", "body", int64(*m.SanUsecPerMirroredWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateSanUsecPerReadOp(formats strfmt.Registry) error {

	if swag.IsZero(m.SanUsecPerReadOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("san_usec_per_read_op", "body", int64(*m.SanUsecPerReadOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateSanUsecPerWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.SanUsecPerWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("san_usec_per_write_op", "body", int64(*m.SanUsecPerWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateServiceUsecPerMirroredWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceUsecPerMirroredWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("service_usec_per_mirrored_write_op", "body", int64(*m.ServiceUsecPerMirroredWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateServiceUsecPerReadOp(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceUsecPerReadOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("service_usec_per_read_op", "body", int64(*m.ServiceUsecPerReadOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateServiceUsecPerWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceUsecPerWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("service_usec_per_write_op", "body", int64(*m.ServiceUsecPerWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateUsecPerMirroredWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.UsecPerMirroredWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("usec_per_mirrored_write_op", "body", int64(*m.UsecPerMirroredWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateUsecPerReadOp(formats strfmt.Registry) error {

	if swag.IsZero(m.UsecPerReadOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("usec_per_read_op", "body", int64(*m.UsecPerReadOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateUsecPerWriteOp(formats strfmt.Registry) error {

	if swag.IsZero(m.UsecPerWriteOp) { // not required
		return nil
	}

	if err := validate.MinimumInt("usec_per_write_op", "body", int64(*m.UsecPerWriteOp), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateWriteBytesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.WriteBytesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("write_bytes_per_sec", "body", int64(*m.WriteBytesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceAllOf0) validateWritesPerSec(formats strfmt.Registry) error {

	if swag.IsZero(m.WritesPerSec) { // not required
		return nil
	}

	if err := validate.MinimumInt("writes_per_sec", "body", int64(*m.WritesPerSec), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceAllOf0) UnmarshalBinary(b []byte) error {
	var res PerformanceAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
