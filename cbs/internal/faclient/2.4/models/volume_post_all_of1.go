// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumePostAllOf1 volume post all of1
//
// swagger:model volumePostAllOf1
type VolumePostAllOf1 struct {

	// Sets the virtual size of the volume. Measured in bytes.
	// Maximum: 4.503599627370496e+15
	Provisioned int64 `json:"provisioned,omitempty"`

	// qos
	Qos *VolumePostAllOf1Qos `json:"qos,omitempty"`

	// source
	Source *VolumePostAllOf1Source `json:"source,omitempty"`

	// The type of volume. Valid values are `protocol_endpoint` and `regular`.
	Subtype string `json:"subtype,omitempty"`
}

// Validate validates this volume post all of1
func (m *VolumePostAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvisioned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumePostAllOf1) validateProvisioned(formats strfmt.Registry) error {

	if swag.IsZero(m.Provisioned) { // not required
		return nil
	}

	if err := validate.MaximumInt("provisioned", "body", int64(m.Provisioned), 4.503599627370496e+15, false); err != nil {
		return err
	}

	return nil
}

func (m *VolumePostAllOf1) validateQos(formats strfmt.Registry) error {

	if swag.IsZero(m.Qos) { // not required
		return nil
	}

	if m.Qos != nil {
		if err := m.Qos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos")
			}
			return err
		}
	}

	return nil
}

func (m *VolumePostAllOf1) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumePostAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumePostAllOf1) UnmarshalBinary(b []byte) error {
	var res VolumePostAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
