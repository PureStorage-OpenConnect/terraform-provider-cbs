// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPI24PoliciesNfs(params *DeleteAPI24PoliciesNfsParams) (*DeleteApi24PoliciesNfsOK, error)

	DeleteAPI24PoliciesNfsClientRules(params *DeleteAPI24PoliciesNfsClientRulesParams) (*DeleteApi24PoliciesNfsClientRulesOK, error)

	DeleteAPI24PoliciesNfsMembers(params *DeleteAPI24PoliciesNfsMembersParams) (*DeleteApi24PoliciesNfsMembersOK, error)

	DeleteAPI24PoliciesSmb(params *DeleteAPI24PoliciesSmbParams) (*DeleteApi24PoliciesSmbOK, error)

	DeleteAPI24PoliciesSmbClientRules(params *DeleteAPI24PoliciesSmbClientRulesParams) (*DeleteApi24PoliciesSmbClientRulesOK, error)

	DeleteAPI24PoliciesSmbMembers(params *DeleteAPI24PoliciesSmbMembersParams) (*DeleteApi24PoliciesSmbMembersOK, error)

	DeleteAPI24PoliciesSnapshot(params *DeleteAPI24PoliciesSnapshotParams) (*DeleteApi24PoliciesSnapshotOK, error)

	DeleteAPI24PoliciesSnapshotMembers(params *DeleteAPI24PoliciesSnapshotMembersParams) (*DeleteApi24PoliciesSnapshotMembersOK, error)

	DeleteAPI24PoliciesSnapshotRules(params *DeleteAPI24PoliciesSnapshotRulesParams) (*DeleteApi24PoliciesSnapshotRulesOK, error)

	GetAPI24Policies(params *GetAPI24PoliciesParams) (*GetApi24PoliciesOK, error)

	GetAPI24PoliciesMembers(params *GetAPI24PoliciesMembersParams) (*GetApi24PoliciesMembersOK, error)

	GetAPI24PoliciesNfs(params *GetAPI24PoliciesNfsParams) (*GetApi24PoliciesNfsOK, error)

	GetAPI24PoliciesNfsClientRules(params *GetAPI24PoliciesNfsClientRulesParams) (*GetApi24PoliciesNfsClientRulesOK, error)

	GetAPI24PoliciesNfsMembers(params *GetAPI24PoliciesNfsMembersParams) (*GetApi24PoliciesNfsMembersOK, error)

	GetAPI24PoliciesSmb(params *GetAPI24PoliciesSmbParams) (*GetApi24PoliciesSmbOK, error)

	GetAPI24PoliciesSmbClientRules(params *GetAPI24PoliciesSmbClientRulesParams) (*GetApi24PoliciesSmbClientRulesOK, error)

	GetAPI24PoliciesSmbMembers(params *GetAPI24PoliciesSmbMembersParams) (*GetApi24PoliciesSmbMembersOK, error)

	GetAPI24PoliciesSnapshot(params *GetAPI24PoliciesSnapshotParams) (*GetApi24PoliciesSnapshotOK, error)

	GetAPI24PoliciesSnapshotMembers(params *GetAPI24PoliciesSnapshotMembersParams) (*GetApi24PoliciesSnapshotMembersOK, error)

	GetAPI24PoliciesSnapshotRules(params *GetAPI24PoliciesSnapshotRulesParams) (*GetApi24PoliciesSnapshotRulesOK, error)

	PatchAPI24PoliciesNfs(params *PatchAPI24PoliciesNfsParams) (*PatchApi24PoliciesNfsOK, error)

	PatchAPI24PoliciesSmb(params *PatchAPI24PoliciesSmbParams) (*PatchApi24PoliciesSmbOK, error)

	PatchAPI24PoliciesSnapshot(params *PatchAPI24PoliciesSnapshotParams) (*PatchApi24PoliciesSnapshotOK, error)

	PostAPI24PoliciesNfs(params *PostAPI24PoliciesNfsParams) (*PostApi24PoliciesNfsOK, error)

	PostAPI24PoliciesNfsClientRules(params *PostAPI24PoliciesNfsClientRulesParams) (*PostApi24PoliciesNfsClientRulesOK, error)

	PostAPI24PoliciesNfsMembers(params *PostAPI24PoliciesNfsMembersParams) (*PostApi24PoliciesNfsMembersOK, error)

	PostAPI24PoliciesSmb(params *PostAPI24PoliciesSmbParams) (*PostApi24PoliciesSmbOK, error)

	PostAPI24PoliciesSmbClientRules(params *PostAPI24PoliciesSmbClientRulesParams) (*PostApi24PoliciesSmbClientRulesOK, error)

	PostAPI24PoliciesSmbMembers(params *PostAPI24PoliciesSmbMembersParams) (*PostApi24PoliciesSmbMembersOK, error)

	PostAPI24PoliciesSnapshot(params *PostAPI24PoliciesSnapshotParams) (*PostApi24PoliciesSnapshotOK, error)

	PostAPI24PoliciesSnapshotMembers(params *PostAPI24PoliciesSnapshotMembersParams) (*PostApi24PoliciesSnapshotMembersOK, error)

	PostAPI24PoliciesSnapshotRules(params *PostAPI24PoliciesSnapshotRulesParams) (*PostApi24PoliciesSnapshotRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPI24PoliciesNfs deletes n f s policies

  Deletes one or more NFS policies. The `ids` or `names` parameter is required, but they cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesNfs(params *DeleteAPI24PoliciesNfsParams) (*DeleteApi24PoliciesNfsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesNfsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesNfs",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/nfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesNfsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesNfsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesNfs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesNfsClientRules deletes n f s client policy rules

  Delete one or more NFS client policy rules. The `policy_ids` or `policy_names` parameter is required, but they cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesNfsClientRules(params *DeleteAPI24PoliciesNfsClientRulesParams) (*DeleteApi24PoliciesNfsClientRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesNfsClientRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesNfsClientRules",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/nfs/client-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesNfsClientRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesNfsClientRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesNfsClientRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesNfsMembers deletes n f s policies

  Deletes one or more NFS policies from resources. The `policy_ids` or `policy_names` parameter is required, but cannot be set together. The `member_ids` or `member_names` parameter is required, but cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesNfsMembers(params *DeleteAPI24PoliciesNfsMembersParams) (*DeleteApi24PoliciesNfsMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesNfsMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesNfsMembers",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/nfs/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesNfsMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesNfsMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesNfsMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesSmb deletes s m b policies

  Delete one or more SMB policies. The `ids` or `names` parameter is required, but they cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesSmb(params *DeleteAPI24PoliciesSmbParams) (*DeleteApi24PoliciesSmbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesSmbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesSmb",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/smb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesSmbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesSmbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesSmb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesSmbClientRules deletes s m b client policy rules

  Deletes one or more SMB client policy rules. The `policy_ids` or `policy_names` parameter is required, but they cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesSmbClientRules(params *DeleteAPI24PoliciesSmbClientRulesParams) (*DeleteApi24PoliciesSmbClientRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesSmbClientRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesSmbClientRules",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/smb/client-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesSmbClientRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesSmbClientRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesSmbClientRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesSmbMembers deletes s m b policies

  Deletes one or more SMB policies from resources. The `policy_ids` or `policy_names` parameter is required, but cannot be set together. The `member_ids` or `member_names` parameter is required, but cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesSmbMembers(params *DeleteAPI24PoliciesSmbMembersParams) (*DeleteApi24PoliciesSmbMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesSmbMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesSmbMembers",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/smb/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesSmbMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesSmbMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesSmbMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesSnapshot deletes snapshot policies

  Deletes one or more snapshot policies. The `ids` or `names` parameter is required, but they cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesSnapshot(params *DeleteAPI24PoliciesSnapshotParams) (*DeleteApi24PoliciesSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesSnapshot",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesSnapshotMembers deletes snapshot policies

  Deletes one or more snapshot policies from resources. The `policy_ids` or `policy_names` parameter is required, but cannot be set together. The `member_ids` or `member_names` parameter is required, but cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesSnapshotMembers(params *DeleteAPI24PoliciesSnapshotMembersParams) (*DeleteApi24PoliciesSnapshotMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesSnapshotMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesSnapshotMembers",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/snapshot/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesSnapshotMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesSnapshotMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesSnapshotMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPI24PoliciesSnapshotRules deletes snapshot policy rules

  Deletes one or more snapshot policy rules. The `policy_ids` or `policy_names` parameter is required, but they cannot be set together.
*/
func (a *Client) DeleteAPI24PoliciesSnapshotRules(params *DeleteAPI24PoliciesSnapshotRulesParams) (*DeleteApi24PoliciesSnapshotRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24PoliciesSnapshotRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24PoliciesSnapshotRules",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/policies/snapshot/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24PoliciesSnapshotRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24PoliciesSnapshotRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24PoliciesSnapshotRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24Policies lists policies

  Displays a list of policies.
*/
func (a *Client) GetAPI24Policies(params *GetAPI24PoliciesParams) (*GetApi24PoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24Policies",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24Policies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesMembers lists policy members

  Displays a list of policy members.
*/
func (a *Client) GetAPI24PoliciesMembers(params *GetAPI24PoliciesMembersParams) (*GetApi24PoliciesMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesMembers",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesNfs lists n f s policies

  Displays a list of NFS policies.
*/
func (a *Client) GetAPI24PoliciesNfs(params *GetAPI24PoliciesNfsParams) (*GetApi24PoliciesNfsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesNfsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesNfs",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/nfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesNfsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesNfsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesNfs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesNfsClientRules lists n f s client policy rules

  Displays a list of NFS client policy rules.
*/
func (a *Client) GetAPI24PoliciesNfsClientRules(params *GetAPI24PoliciesNfsClientRulesParams) (*GetApi24PoliciesNfsClientRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesNfsClientRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesNfsClientRules",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/nfs/client-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesNfsClientRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesNfsClientRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesNfsClientRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesNfsMembers lists n f s policy members

  Displays a list of NFS policy members.
*/
func (a *Client) GetAPI24PoliciesNfsMembers(params *GetAPI24PoliciesNfsMembersParams) (*GetApi24PoliciesNfsMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesNfsMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesNfsMembers",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/nfs/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesNfsMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesNfsMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesNfsMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesSmb lists s m b policies

  Return a list of SMB policies.
*/
func (a *Client) GetAPI24PoliciesSmb(params *GetAPI24PoliciesSmbParams) (*GetApi24PoliciesSmbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesSmbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesSmb",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/smb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesSmbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesSmbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesSmb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesSmbClientRules lists s m b client policy rules

  Displays a list of SMB client policy rules.
*/
func (a *Client) GetAPI24PoliciesSmbClientRules(params *GetAPI24PoliciesSmbClientRulesParams) (*GetApi24PoliciesSmbClientRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesSmbClientRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesSmbClientRules",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/smb/client-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesSmbClientRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesSmbClientRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesSmbClientRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesSmbMembers lists s m b policy members

  Displays a list of SMB policy members.
*/
func (a *Client) GetAPI24PoliciesSmbMembers(params *GetAPI24PoliciesSmbMembersParams) (*GetApi24PoliciesSmbMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesSmbMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesSmbMembers",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/smb/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesSmbMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesSmbMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesSmbMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesSnapshot lists snapshot policies

  Displays a list of snapshot policies.
*/
func (a *Client) GetAPI24PoliciesSnapshot(params *GetAPI24PoliciesSnapshotParams) (*GetApi24PoliciesSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesSnapshot",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesSnapshotMembers lists snapshot policy members

  Displays a list of snapshot policy members.
*/
func (a *Client) GetAPI24PoliciesSnapshotMembers(params *GetAPI24PoliciesSnapshotMembersParams) (*GetApi24PoliciesSnapshotMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesSnapshotMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesSnapshotMembers",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/snapshot/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesSnapshotMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesSnapshotMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesSnapshotMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24PoliciesSnapshotRules lists snapshot policy rules

  Displays a list of snapshot policy rules.
*/
func (a *Client) GetAPI24PoliciesSnapshotRules(params *GetAPI24PoliciesSnapshotRulesParams) (*GetApi24PoliciesSnapshotRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24PoliciesSnapshotRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24PoliciesSnapshotRules",
		Method:             "GET",
		PathPattern:        "/api/2.4/policies/snapshot/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24PoliciesSnapshotRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24PoliciesSnapshotRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24PoliciesSnapshotRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24PoliciesNfs modifies n f s policies

  Modifies one or more NFS policies. To enable a policy, set `enabled=true`. To disable a policy, set `enabled=false`. To rename a policy, set `name` to the new name. The `ids` or `names` parameter is required, but cannot be set together.
*/
func (a *Client) PatchAPI24PoliciesNfs(params *PatchAPI24PoliciesNfsParams) (*PatchApi24PoliciesNfsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24PoliciesNfsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24PoliciesNfs",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/policies/nfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24PoliciesNfsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24PoliciesNfsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24PoliciesNfs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24PoliciesSmb updates s m b policies

  Update one or more SMB policies. To enable a policy, set `enabled=true`. To disable a policy, set `enabled=false`. To enable access based enumeration, set `access_based_enumeration_enabled=true`. To disable access based enumeration, set `access_based_enumeration_enabled=false`. To rename a policy, set `name` to the new name. The `ids` or `names` parameter is required, but cannot be set together.
*/
func (a *Client) PatchAPI24PoliciesSmb(params *PatchAPI24PoliciesSmbParams) (*PatchApi24PoliciesSmbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24PoliciesSmbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24PoliciesSmb",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/policies/smb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24PoliciesSmbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24PoliciesSmbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24PoliciesSmb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24PoliciesSnapshot modifies snapshot policies

  Modifies one or more snapshot policies. To enable a policy, set `enabled=true`. To disable a policy, set `enabled=true`. To rename a policy, set `name` to the new name. The `ids` or `names` parameter is required, but cannot be set together.
*/
func (a *Client) PatchAPI24PoliciesSnapshot(params *PatchAPI24PoliciesSnapshotParams) (*PatchApi24PoliciesSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24PoliciesSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24PoliciesSnapshot",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/policies/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24PoliciesSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24PoliciesSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24PoliciesSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesNfs creates n f s policies

  Creates one or more NFS policies.
*/
func (a *Client) PostAPI24PoliciesNfs(params *PostAPI24PoliciesNfsParams) (*PostApi24PoliciesNfsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesNfsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesNfs",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/nfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesNfsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesNfsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesNfs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesNfsClientRules creates n f s client policy rules

  Creates one or more NFS client policy rules. The `policy_ids` or `policy_names` parameter is required, but cannot be set together.
*/
func (a *Client) PostAPI24PoliciesNfsClientRules(params *PostAPI24PoliciesNfsClientRulesParams) (*PostApi24PoliciesNfsClientRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesNfsClientRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesNfsClientRules",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/nfs/client-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesNfsClientRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesNfsClientRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesNfsClientRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesNfsMembers creates n f s policies

  Creates a membership between one or more resources with an NFS policy. Applicable resources are directories. The `policy_ids` or `policy_names` parameter is required, but cannot be set together.
*/
func (a *Client) PostAPI24PoliciesNfsMembers(params *PostAPI24PoliciesNfsMembersParams) (*PostApi24PoliciesNfsMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesNfsMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesNfsMembers",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/nfs/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesNfsMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesNfsMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesNfsMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesSmb creates s m b policies

  Create one or more SMB policies. To create an SMB policy with access based enumeration enabled, set `access_based_enumeration_enabled=true`.
*/
func (a *Client) PostAPI24PoliciesSmb(params *PostAPI24PoliciesSmbParams) (*PostApi24PoliciesSmbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesSmbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesSmb",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/smb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesSmbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesSmbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesSmb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesSmbClientRules creates s m b client policy rules

  Create one or more SMB client policy rules. The `policy_ids` or `policy_names` parameter is required, but cannot be set together.
*/
func (a *Client) PostAPI24PoliciesSmbClientRules(params *PostAPI24PoliciesSmbClientRulesParams) (*PostApi24PoliciesSmbClientRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesSmbClientRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesSmbClientRules",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/smb/client-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesSmbClientRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesSmbClientRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesSmbClientRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesSmbMembers creates s m b policies

  Creates a membership between one or more resources with an SMB policy. Applicable resources are directories. The `policy_ids` or `policy_names` parameter is required, but cannot be set together.
*/
func (a *Client) PostAPI24PoliciesSmbMembers(params *PostAPI24PoliciesSmbMembersParams) (*PostApi24PoliciesSmbMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesSmbMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesSmbMembers",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/smb/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesSmbMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesSmbMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesSmbMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesSnapshot creates snapshot policies

  Creates one or more snapshot policies.
*/
func (a *Client) PostAPI24PoliciesSnapshot(params *PostAPI24PoliciesSnapshotParams) (*PostApi24PoliciesSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesSnapshot",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesSnapshotMembers creates snapshot policies

  Creates a membership between one or more resources with a snapshot policy. Applicable resources are directories. The `policy_ids` or `policy_names` parameter is required, but cannot be set together.
*/
func (a *Client) PostAPI24PoliciesSnapshotMembers(params *PostAPI24PoliciesSnapshotMembersParams) (*PostApi24PoliciesSnapshotMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesSnapshotMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesSnapshotMembers",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/snapshot/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesSnapshotMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesSnapshotMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesSnapshotMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24PoliciesSnapshotRules creates snapshot policy rules

  Creates one or more snapshot policy rules. The `policy_ids` or `policy_names` parameter is required, but cannot be set together.
*/
func (a *Client) PostAPI24PoliciesSnapshotRules(params *PostAPI24PoliciesSnapshotRulesParams) (*PostApi24PoliciesSnapshotRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24PoliciesSnapshotRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24PoliciesSnapshotRules",
		Method:             "POST",
		PathPattern:        "/api/2.4/policies/snapshot/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24PoliciesSnapshotRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24PoliciesSnapshotRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24PoliciesSnapshotRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
