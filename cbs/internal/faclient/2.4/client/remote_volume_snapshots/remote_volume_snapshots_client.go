// Code generated by go-swagger; DO NOT EDIT.

package remote_volume_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new remote volume snapshots API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for remote volume snapshots API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPI24RemoteVolumeSnapshots(params *DeleteAPI24RemoteVolumeSnapshotsParams) (*DeleteApi24RemoteVolumeSnapshotsOK, error)

	GetAPI24RemoteVolumeSnapshots(params *GetAPI24RemoteVolumeSnapshotsParams) (*GetApi24RemoteVolumeSnapshotsOK, error)

	GetAPI24RemoteVolumeSnapshotsTransfer(params *GetAPI24RemoteVolumeSnapshotsTransferParams) (*GetApi24RemoteVolumeSnapshotsTransferOK, error)

	PatchAPI24RemoteVolumeSnapshots(params *PatchAPI24RemoteVolumeSnapshotsParams) (*PatchApi24RemoteVolumeSnapshotsOK, error)

	PostAPI24RemoteVolumeSnapshots(params *PostAPI24RemoteVolumeSnapshotsParams) (*PostApi24RemoteVolumeSnapshotsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPI24RemoteVolumeSnapshots eradicates a remote volume snapshot

  Eradicates a remote volume snapshot that has been destroyed and is pending eradication. Eradicated remote volume snapshots cannot be recovered. Remote volume snapshots are destroyed through the `PATCH` method. The `names` parameter represents the name of the volume snapshot. The `on` parameter represents the name of the offload target. The `names` and `on` parameters are required and must be used together.
*/
func (a *Client) DeleteAPI24RemoteVolumeSnapshots(params *DeleteAPI24RemoteVolumeSnapshotsParams) (*DeleteApi24RemoteVolumeSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24RemoteVolumeSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24RemoteVolumeSnapshots",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/remote-volume-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24RemoteVolumeSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24RemoteVolumeSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24RemoteVolumeSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24RemoteVolumeSnapshots lists remote volume snapshots

  Displays a list of remote volume snapshots.
*/
func (a *Client) GetAPI24RemoteVolumeSnapshots(params *GetAPI24RemoteVolumeSnapshotsParams) (*GetApi24RemoteVolumeSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24RemoteVolumeSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24RemoteVolumeSnapshots",
		Method:             "GET",
		PathPattern:        "/api/2.4/remote-volume-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24RemoteVolumeSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24RemoteVolumeSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24RemoteVolumeSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24RemoteVolumeSnapshotsTransfer lists remote volume snapshots with transfer statistics

  Returns a list of remote volume snapshots and their transfer statistics.
*/
func (a *Client) GetAPI24RemoteVolumeSnapshotsTransfer(params *GetAPI24RemoteVolumeSnapshotsTransferParams) (*GetApi24RemoteVolumeSnapshotsTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24RemoteVolumeSnapshotsTransferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24RemoteVolumeSnapshotsTransfer",
		Method:             "GET",
		PathPattern:        "/api/2.4/remote-volume-snapshots/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24RemoteVolumeSnapshotsTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24RemoteVolumeSnapshotsTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24RemoteVolumeSnapshotsTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24RemoteVolumeSnapshots manages a remote volume snapshot

  Destroy or recover a remote volume snapshot from the offload target. The `on` parameter represents the name of the offload target. The `names` parameter and the `on` parameter are required and must be used together.
*/
func (a *Client) PatchAPI24RemoteVolumeSnapshots(params *PatchAPI24RemoteVolumeSnapshotsParams) (*PatchApi24RemoteVolumeSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24RemoteVolumeSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24RemoteVolumeSnapshots",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/remote-volume-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24RemoteVolumeSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24RemoteVolumeSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24RemoteVolumeSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24RemoteVolumeSnapshots creates a volume snapshot on a connected remote target or offload target

  Creates a volume snapshot on the specified connected remote target or offload target.
*/
func (a *Client) PostAPI24RemoteVolumeSnapshots(params *PostAPI24RemoteVolumeSnapshotsParams) (*PostApi24RemoteVolumeSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24RemoteVolumeSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24RemoteVolumeSnapshots",
		Method:             "POST",
		PathPattern:        "/api/2.4/remote-volume-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24RemoteVolumeSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24RemoteVolumeSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24RemoteVolumeSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
