// Code generated by go-swagger; DO NOT EDIT.

package volume_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volume groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volume groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPI24VolumeGroups(params *DeleteAPI24VolumeGroupsParams) (*DeleteApi24VolumeGroupsOK, error)

	GetAPI24VolumeGroups(params *GetAPI24VolumeGroupsParams) (*GetApi24VolumeGroupsOK, error)

	GetAPI24VolumeGroupsPerformance(params *GetAPI24VolumeGroupsPerformanceParams) (*GetApi24VolumeGroupsPerformanceOK, error)

	GetAPI24VolumeGroupsSpace(params *GetAPI24VolumeGroupsSpaceParams) (*GetApi24VolumeGroupsSpaceOK, error)

	GetAPI24VolumeGroupsVolumes(params *GetAPI24VolumeGroupsVolumesParams) (*GetApi24VolumeGroupsVolumesOK, error)

	PatchAPI24VolumeGroups(params *PatchAPI24VolumeGroupsParams) (*PatchApi24VolumeGroupsOK, error)

	PostAPI24VolumeGroups(params *PostAPI24VolumeGroupsParams) (*PostApi24VolumeGroupsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPI24VolumeGroups deletes a volume group

  Deletes a volume group that has been destroyed and is pending eradication. Eradicated volume groups cannot be recovered. Volume groups are destroyed through the PATCH method. The `ids` or `names` parameter is required, but cannot be set together.
*/
func (a *Client) DeleteAPI24VolumeGroups(params *DeleteAPI24VolumeGroupsParams) (*DeleteApi24VolumeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24VolumeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24VolumeGroups",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/volume-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24VolumeGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24VolumeGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24VolumeGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24VolumeGroups lists volume groups

  Displays a list of volume groups, including those pending eradication.
*/
func (a *Client) GetAPI24VolumeGroups(params *GetAPI24VolumeGroupsParams) (*GetApi24VolumeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24VolumeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24VolumeGroups",
		Method:             "GET",
		PathPattern:        "/api/2.4/volume-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24VolumeGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24VolumeGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24VolumeGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24VolumeGroupsPerformance lists volume group performance data

  Returns real-time and historical performance data, real-time latency data, and average I/O sizes for each volume group and and as a total of all volume groups across the entire array.
*/
func (a *Client) GetAPI24VolumeGroupsPerformance(params *GetAPI24VolumeGroupsPerformanceParams) (*GetApi24VolumeGroupsPerformanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24VolumeGroupsPerformanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24VolumeGroupsPerformance",
		Method:             "GET",
		PathPattern:        "/api/2.4/volume-groups/performance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24VolumeGroupsPerformanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24VolumeGroupsPerformanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24VolumeGroupsPerformance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24VolumeGroupsSpace lists volume group space information

  Returns the provisioned (virtual) size and physical storage consumption data for each volume group.
*/
func (a *Client) GetAPI24VolumeGroupsSpace(params *GetAPI24VolumeGroupsSpaceParams) (*GetApi24VolumeGroupsSpaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24VolumeGroupsSpaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24VolumeGroupsSpace",
		Method:             "GET",
		PathPattern:        "/api/2.4/volume-groups/space",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24VolumeGroupsSpaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24VolumeGroupsSpaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24VolumeGroupsSpace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24VolumeGroupsVolumes lists volume groups with volumes

  Returns a list of volume groups that contain volumes.
*/
func (a *Client) GetAPI24VolumeGroupsVolumes(params *GetAPI24VolumeGroupsVolumesParams) (*GetApi24VolumeGroupsVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24VolumeGroupsVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24VolumeGroupsVolumes",
		Method:             "GET",
		PathPattern:        "/api/2.4/volume-groups/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24VolumeGroupsVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24VolumeGroupsVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24VolumeGroupsVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24VolumeGroups modifies a volume group

  Modifies a volume group. You can rename, destroy, recover, or set QoS limits for a volume group. To rename a volume group, set `name` to the new name. To destroy a volume group, set `destroyed=true`. To recover a volume group that has been destroyed and is pending eradication, set `destroyed=false`. Sets the bandwidth and IOPs limits of a volume group through the respective `bandwidth_limit` and `iops_limit` parameter. The `ids` or `names` parameter is required, but cannot be set together.
*/
func (a *Client) PatchAPI24VolumeGroups(params *PatchAPI24VolumeGroupsParams) (*PatchApi24VolumeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24VolumeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24VolumeGroups",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/volume-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24VolumeGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24VolumeGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24VolumeGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24VolumeGroups creates a volume group

  Creates a volume group. The volume group itself does not contain any meaningful content; instead, it acts as a container that is used to organize volumes. Once a volume group has been created, volumes can be created inside the volume group or moved into and out of the volume group.
*/
func (a *Client) PostAPI24VolumeGroups(params *PostAPI24VolumeGroupsParams) (*PostApi24VolumeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24VolumeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24VolumeGroups",
		Method:             "POST",
		PathPattern:        "/api/2.4/volume-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24VolumeGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24VolumeGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24VolumeGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
