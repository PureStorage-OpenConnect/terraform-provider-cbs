// Code generated by go-swagger; DO NOT EDIT.

package smi_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new smi s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for smi s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPI24SMIS(params *GetAPI24SMISParams) (*GetApi24SMISOK, error)

	PatchAPI24SMIS(params *PatchAPI24SMISParams) (*PatchApi24SMISOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPI24SMIS lists SMI s settings

  Displays the SMI-S settings, including the name of the array and whether SLP and WBEM-HTTPS are enabled.
*/
func (a *Client) GetAPI24SMIS(params *GetAPI24SMISParams) (*GetApi24SMISOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24SMISParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24SMIS",
		Method:             "GET",
		PathPattern:        "/api/2.4/smi-s",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24SMISReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24SMISOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24SMIS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24SMIS modifies s l p and SMI s

  Modifies the Service Location Protocol (SLP) and the SMI-S provider, enabling or disabling them.
*/
func (a *Client) PatchAPI24SMIS(params *PatchAPI24SMISParams) (*PatchApi24SMISOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24SMISParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24SMIS",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/smi-s",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24SMISReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24SMISOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24SMIS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
