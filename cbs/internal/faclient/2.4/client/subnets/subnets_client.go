// Code generated by go-swagger; DO NOT EDIT.

package subnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subnets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subnets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPI24Subnets(params *DeleteAPI24SubnetsParams) (*DeleteApi24SubnetsOK, error)

	GetAPI24Subnets(params *GetAPI24SubnetsParams) (*GetApi24SubnetsOK, error)

	PatchAPI24Subnets(params *PatchAPI24SubnetsParams) (*PatchApi24SubnetsOK, error)

	PostAPI24Subnets(params *PostAPI24SubnetsParams) (*PostApi24SubnetsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPI24Subnets deletes subnet

  Deletes subnets. A subnet can only be deleted if it has no interfaces. Interfaces must be removed by using the `network-interfaces` endpoint.
*/
func (a *Client) DeleteAPI24Subnets(params *DeleteAPI24SubnetsParams) (*DeleteApi24SubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24SubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24Subnets",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24SubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24SubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24Subnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24Subnets lists subnets

  Displays a list of subnets with statuses and attributes.
*/
func (a *Client) GetAPI24Subnets(params *GetAPI24SubnetsParams) (*GetApi24SubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24SubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24Subnets",
		Method:             "GET",
		PathPattern:        "/api/2.4/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24SubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24SubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24Subnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24Subnets modifies subnet

  Modifies one or more specified subnet properties.
*/
func (a *Client) PatchAPI24Subnets(params *PatchAPI24SubnetsParams) (*PatchApi24SubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24SubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24Subnets",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24SubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24SubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24Subnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24Subnets creates subnet

  Creates a subnet with the specified parameters.
*/
func (a *Client) PostAPI24Subnets(params *PostAPI24SubnetsParams) (*PostApi24SubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24SubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24Subnets",
		Method:             "POST",
		PathPattern:        "/api/2.4/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24SubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24SubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24Subnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
