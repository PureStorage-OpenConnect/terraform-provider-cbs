// Code generated by go-swagger; DO NOT EDIT.

package remote_protection_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new remote protection groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for remote protection groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPI24RemoteProtectionGroups(params *DeleteAPI24RemoteProtectionGroupsParams) (*DeleteApi24RemoteProtectionGroupsOK, error)

	GetAPI24RemoteProtectionGroups(params *GetAPI24RemoteProtectionGroupsParams) (*GetApi24RemoteProtectionGroupsOK, error)

	PatchAPI24RemoteProtectionGroups(params *PatchAPI24RemoteProtectionGroupsParams) (*PatchApi24RemoteProtectionGroupsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPI24RemoteProtectionGroups eradicates a remote protection group

  Eradicates a remote protection group that has been destroyed and is pending eradication. Eradicated remote protection groups cannot be recovered. Remote protection groups are destroyed through the `PATCH` method. The `on` parameter represents the name of the offload target. The `ids` or `names` parameter and the `on` parameter are required and must be used together.
*/
func (a *Client) DeleteAPI24RemoteProtectionGroups(params *DeleteAPI24RemoteProtectionGroupsParams) (*DeleteApi24RemoteProtectionGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24RemoteProtectionGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24RemoteProtectionGroups",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/remote-protection-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24RemoteProtectionGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24RemoteProtectionGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24RemoteProtectionGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24RemoteProtectionGroups lists remote protection groups

  Returns a list of remote protection groups.
*/
func (a *Client) GetAPI24RemoteProtectionGroups(params *GetAPI24RemoteProtectionGroupsParams) (*GetApi24RemoteProtectionGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24RemoteProtectionGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24RemoteProtectionGroups",
		Method:             "GET",
		PathPattern:        "/api/2.4/remote-protection-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24RemoteProtectionGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24RemoteProtectionGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24RemoteProtectionGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24RemoteProtectionGroups manages a remote protection group

  Configures the snapshot retention schedule of a remote protection group. Also destroys a remote protection group from the offload target. Before the remote protection group can be destroyed, the offload target must first be removed from the protection group via the source array. The `on` parameter represents the name of the offload target. The `ids` or `names` parameter and the `on` parameter are required and must be used together.
*/
func (a *Client) PatchAPI24RemoteProtectionGroups(params *PatchAPI24RemoteProtectionGroupsParams) (*PatchApi24RemoteProtectionGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24RemoteProtectionGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24RemoteProtectionGroups",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/remote-protection-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24RemoteProtectionGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24RemoteProtectionGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24RemoteProtectionGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
