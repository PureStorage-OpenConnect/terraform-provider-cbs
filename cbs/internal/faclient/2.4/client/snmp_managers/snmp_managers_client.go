// Code generated by go-swagger; DO NOT EDIT.

package snmp_managers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new snmp managers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snmp managers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPI24SNMPManagers(params *DeleteAPI24SNMPManagersParams) (*DeleteApi24SNMPManagersOK, error)

	GetAPI24SNMPManagers(params *GetAPI24SNMPManagersParams) (*GetApi24SNMPManagersOK, error)

	GetAPI24SNMPManagersTest(params *GetAPI24SNMPManagersTestParams) (*GetApi24SNMPManagersTestOK, error)

	PatchAPI24SNMPManagers(params *PatchAPI24SNMPManagersParams) (*PatchApi24SNMPManagersOK, error)

	PostAPI24SNMPManagers(params *PostAPI24SNMPManagersParams) (*PostApi24SNMPManagersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPI24SNMPManagers deletes SNMP manager

  Deletes the SNMP manager object and stops communication with specified managers.
*/
func (a *Client) DeleteAPI24SNMPManagers(params *DeleteAPI24SNMPManagersParams) (*DeleteApi24SNMPManagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24SNMPManagersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24SNMPManagers",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/snmp-managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24SNMPManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24SNMPManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24SNMPManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24SNMPManagers lists SNMP managers

  Displays designated SNMP managers and their communication and security attributes.
*/
func (a *Client) GetAPI24SNMPManagers(params *GetAPI24SNMPManagersParams) (*GetApi24SNMPManagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24SNMPManagersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24SNMPManagers",
		Method:             "GET",
		PathPattern:        "/api/2.4/snmp-managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24SNMPManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24SNMPManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24SNMPManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24SNMPManagersTest lists SNMP manager test results

  Displays SNMP manager test results (traps or informs).
*/
func (a *Client) GetAPI24SNMPManagersTest(params *GetAPI24SNMPManagersTestParams) (*GetApi24SNMPManagersTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24SNMPManagersTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24SNMPManagersTest",
		Method:             "GET",
		PathPattern:        "/api/2.4/snmp-managers/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24SNMPManagersTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24SNMPManagersTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24SNMPManagersTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24SNMPManagers modifies SNMP manager

  Modifies the name or the protocol attributes of the specified SNMP manager.
*/
func (a *Client) PatchAPI24SNMPManagers(params *PatchAPI24SNMPManagersParams) (*PatchApi24SNMPManagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24SNMPManagersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24SNMPManagers",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/snmp-managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24SNMPManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24SNMPManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24SNMPManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24SNMPManagers creates SNMP manager

  Creates a Purity SNMP manager object that identifies a host (SNMP manager) and specifies the protocol attributes for communicating with it. Once a manager object is created, the transmission of SNMP traps is immediately enabled.
*/
func (a *Client) PostAPI24SNMPManagers(params *PostAPI24SNMPManagersParams) (*PostApi24SNMPManagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24SNMPManagersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24SNMPManagers",
		Method:             "POST",
		PathPattern:        "/api/2.4/snmp-managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24SNMPManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24SNMPManagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24SNMPManagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
