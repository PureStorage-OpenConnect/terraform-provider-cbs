// Code generated by go-swagger; DO NOT EDIT.

package file_systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new file systems API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for file systems API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPI24FileSystems(params *DeleteAPI24FileSystemsParams) (*DeleteApi24FileSystemsOK, error)

	GetAPI24FileSystems(params *GetAPI24FileSystemsParams) (*GetApi24FileSystemsOK, error)

	PatchAPI24FileSystems(params *PatchAPI24FileSystemsParams) (*PatchApi24FileSystemsOK, error)

	PostAPI24FileSystems(params *PostAPI24FileSystemsParams) (*PostApi24FileSystemsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPI24FileSystems deletes file system

  Deletes a file system that has been destroyed and is pending eradication. Eradicated file systems cannot be recovered. File systems are destroyed using the PATCH method.
*/
func (a *Client) DeleteAPI24FileSystems(params *DeleteAPI24FileSystemsParams) (*DeleteApi24FileSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPI24FileSystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPI24FileSystems",
		Method:             "DELETE",
		PathPattern:        "/api/2.4/file-systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPI24FileSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApi24FileSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPI24FileSystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPI24FileSystems lists file systems

  Displays a list of file systems, including those pending eradication.
*/
func (a *Client) GetAPI24FileSystems(params *GetAPI24FileSystemsParams) (*GetApi24FileSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPI24FileSystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPI24FileSystems",
		Method:             "GET",
		PathPattern:        "/api/2.4/file-systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPI24FileSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApi24FileSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPI24FileSystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPI24FileSystems modifies a file system

  Modifies a file system. You can rename, destroy, or recover a file system. To rename a file system, set `name` to the new name. To destroy a file system, set `destroyed=true`. To recover a file system that has been destroyed and is pending eradication, set `destroyed=false`.
*/
func (a *Client) PatchAPI24FileSystems(params *PatchAPI24FileSystemsParams) (*PatchApi24FileSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPI24FileSystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPI24FileSystems",
		Method:             "PATCH",
		PathPattern:        "/api/2.4/file-systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPI24FileSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApi24FileSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPI24FileSystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPI24FileSystems creates file system

  Creates one or more file systems.
*/
func (a *Client) PostAPI24FileSystems(params *PostAPI24FileSystemsParams) (*PostApi24FileSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPI24FileSystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPI24FileSystems",
		Method:             "POST",
		PathPattern:        "/api/2.4/file-systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPI24FileSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApi24FileSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPI24FileSystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
